```{r seroprevalence, warning=FALSE, message = FALSE}
seroprevalence(chik.sero.aggregated) # Value of the seroprevalence
seroprevalence(chik.sero.aggregated) # Value of the seroprevalence
```{r seroprevalence.plot, warning=FALSE, message = FALSE}
seroprevalence.plot(chik.sero.aggregated) # plots of the seroprevalence vs age
seroprevalence.plot(chik.sero.aggregated) # plots of the seroprevalence vs age
## Model of the force of infection
To define a model of pathogen circulation we use the method *FOImodel()*. Some models have additional parameters, for instance the outbreak models require that we specify the number of peaks *K*. In addition, we can define the prior distributions, and additional parameters such as the seroreversion
```{r list_models, warning=FALSE, message = FALSE}
model = list()
model[[1]] = FOImodel(type='constant')
model[[2]] = FOImodel(type='intervention', K=2)
model[[3]] = FOImodel(type='intervention', K=3)
model[[4]] = FOImodel(type='outbreak', K=1)
model[[5]] = FOImodel(type='outbreak', K=2)
model[[6]] = FOImodel(type='constantoutbreak', K=1)
model[[7]] = FOImodel(type='constantoutbreak', K=2)
model[[8]] = FOImodel(type='independent')
model[[9]] = FOImodel(type='constant', sp=0.95, se=0.99)
model[[10]] = FOImodel(type='outbreak', K=1, sp=0.95, se=0.99)
model[[11]] = FOImodel(type='constant', seroreversion = 1)
model = list()
model[[1]] = FOImodel(type='constant')
model[[2]] = FOImodel(type='intervention', K=2)
model[[3]] = FOImodel(type='intervention', K=3)
model[[4]] = FOImodel(type='outbreak', K=1)
model[[5]] = FOImodel(type='outbreak', K=2)
model[[6]] = FOImodel(type='constantoutbreak', K=1)
model[[7]] = FOImodel(type='constantoutbreak', K=2)
model[[8]] = FOImodel(type='independent')
model[[9]] = FOImodel(type='constant', sp=0.95, se=0.99)
model[[10]] = FOImodel(type='outbreak', K=1, sp=0.95, se=0.99)
model[[11]] = FOImodel(type='constant', seroreversion = 1)
## Fitting a model to the serological data
Our objective is to infer the parameters for the differents models, assess whether the models are adequate at reproducing the data, and select the best model(s). Doing these steps for all models is time consuming and we just compare two models here. For each model, we run 4 independent chains of 5,000 iterations each, where by default the first 2,500 are warmups. By specifying the option cores = 4 the chains are run in parallel on 4 CPUs.
First, we fit the model of a single outbreak and a constant annual force of infection (model 6).
```{r print_model, warning=FALSE, message = FALSE}
print(model[[6]])
print(model[[6]])
```{r fit_1, warning=FALSE, message = FALSE}
Fit_1 = fit(data = chik.sero.aggregated,
model = model[[6]],
chain=4,
cores=4,
iter = 5000,
xarmpu = 2500)
Fit_1
Fit_1 = fit(data = chik.sero.aggregated,
model = model[[6]],
chain=1,
cores=1,
iter = 5000,
warmup = 2500)
Fit_1 = fit(data = chik.sero.aggregated,
model = model[[9]],
chain=1,
cores=1,
iter = 5000,
warmup = 2500)
model[[6]]
model[[6]] = FOImodel(type='constantoutbreak', K=1, sp=0.01)
model[[6]] = FOImodel(type='constantoutbreak', K=1, sp=0.99)
Fit_1 = fit(data = chik.sero.aggregated,
model = model[[9]],
chain=1,
cores=1,
iter = 5000,
warmup = 2500)
Fit_1 = fit(data = chik.sero.aggregated,
model = model[[6]],
chain=1,
cores=1,
iter = 5000,
warmup = 2500)
model[[6]] = FOImodel(type='constantoutbreak', K=1, sp=0.99,se=0.99)
Fit_1 = fit(data = chik.sero.aggregated,
model = model[[6]],
chain=1,
cores=1,
iter = 5000,
warmup = 2500)
Fit_1 = fit(data = chik.sero.aggregated,
model = model[[10]],
chain=1,
cores=1,
iter = 5000,
warmup = 2500)
model[[10]] = FOImodel(type='outbreak', K=1, sp=0.95, se=0.99)
model[[10]] = FOImodel(type='constantoutbreak', K=1, sp=0.95, se=0.99)
Fit_1 = fit(data = chik.sero.aggregated,
model = model[[10]],
chain=1,
cores=1,
iter = 5000,
warmup = 2500)
Chains=rstan::extract(Fit_1$fit)
plot(Chains$annual_foi)
plot(Chains$annual_foi,Chains$alpha)
plot(Chains$annual_foi,Chains$T)
C_2 = compute_information_criteria(Fit_2)
Fit_2 = fit(data = chik.sero.aggregated,
model = model[[9]],
chain=4,
cores=4,
iter=5000)
C_2 = compute_information_criteria(Fit_2)
C_2
parameters_credible_intervals(Fit_2)
FOIfit=Fit_2
quants  = c(0.025,0.5,0.975)
chains <- rstan::extract(FOIfit$fit)
chainsout= chains
quantilestext  = paste0(quants*100,'%')
quantilestext[4]  = 'mean'
params <- NULL
if(FOIfit$model$type %in% model.list('All models')){
if(FOIfit$model$type  %in% model.list('Outbreak models')){
C<- chains$T
Torder <- data.frame(C, t(apply(-C, 1, rank, ties.method='min')))
K=FOIfit$model$K
Ranks <- matrix(0,ncol(C),nrow(C))
YearMax <- max(FOIfit$data$sampling_year)
Years = matrix(0,ncol(C),nrow(C))
for (i in 1:K) {
Ranks[i, ] <- which(apply(C,1,function(x) rank(x)) == i);
Years[i, ] <- YearMax - t(C)[Ranks[i,]]+1
}
for(i in 1:K){
chainsout$T[,i] <- t(Years[i, ])
chainsout$alpha[, i] <- t(chains$alpha)[Ranks[i, ]]
# chainsout$beta[, i] <- t(chains$beta)[Ranks[i, ]]
params <- add.quantiles.text(params,
variable=chainsout$T[,i],
name = paste('T',i),
quants= quants,
quantilestext=quantilestext)
name <- paste('alpha',i)
params <- add.quantiles.text(params,
variable=chainsout$alpha[,i],
name = name,
quants= quants,
quantilestext=quantilestext )
# params <- add.quantiles.text(params,
#                              variable  = chainsout$beta[,i],
#                              name = paste('beta',i),
#                              quants= quants,
#                              quantilestext=quantilestext )
#
params <- add.quantiles.text(params,
variable  = 1-exp(-chainsout$alpha[,i]),
name = paste('Outbreak Prob. Inf. ',i),
quants= quants,
quantilestext=quantilestext )
}
}
if(FOIfit$model$type %in% model.list('I models')){
K=FOIfit$model$K
C<- chains$Time
YearMax <- max(FOIfit$data$sampling_year)
Years  <- YearMax - C+1
for(i in 1:K){
if (i>1){
params <- add.quantiles.text(params, variable  = Years[,i],
name = paste('Year_',i),
quants= quants,
quantilestext=quantilestext )
}
LL <- 100*(1-exp(-chains$annual_foi[,i]))
params <- add.quantiles.text(params,
variable  = LL,
name = paste0('Annual Prob. Infection (in %)_',i),
quants= quants,
quantilestext=quantilestext )
}
}
if(FOIfit$model$type=='constantoutbreak'){
LL <- 100*(1-exp(-chains$annual_foi))
params <- add.quantiles.text(params,
variable  = LL,
name = paste0('Annual Prob. Infection (in %)_',i),
quants= quants,
quantilestext=quantilestext )
}
if(FOIfit$model$type=='independent' | FOIfit$model$type=='independent_group'){
L = chains$lambda
for(k in seq(1,dim(L)[2])){
params <- add.quantiles.text(params,
variable=L[,k],
name = paste0('Y_',max(FOIfit$data$sampling_year)-k),
quants=quants,
quantilestext=quantilestext)
}
}
if(FOIfit$model$seroreversion){
rho = chains$rho
params <- add.quantiles.text(params,
variable=rho,
name = paste('rho'),
quants = quants,
quantilestext=quantilestext )
}
}
d= FOIfit$data$category.position.in.table
if(FOIfit$model$cat_lambda & dim(d)[1]>0){
for(i in seq(1,dim(d)[1])){
name <- paste0('FOI of category ', d[i,]$predictor, " relative to " ,  d[i,]$relative_to)
params <- add.quantiles.text(params,
variable=chainsout$Flambda[,d[i,]$index],
name = name,
quants= quants,
quantilestext=quantilestext )
}
}
names(params) <- quantilestext
quantilestext
params
OIfit$model$cat_lambda
FOIfit$model$cat_lambda
d
FOIfit$data
FOIfit$data$category.position.in.table
if(FOIfit$model$type %in% model.list('I models')){
K=FOIfit$model$K
C<- chains$Time
YearMax <- max(FOIfit$data$sampling_year)
Years  <- YearMax - C+1
for(i in 1:K){
if (i>1){
params <- add.quantiles.text(params, variable  = Years[,i],
name = paste('Year_',i),
quants= quants,
quantilestext=quantilestext )
}
LL <- 100*(1-exp(-chains$annual_foi[,i]))
params <- add.quantiles.text(params,
variable  = LL,
name = paste0('Annual Prob. Infection (in %)_',i),
quants= quants,
quantilestext=quantilestext )
}
}
if(FOIfit$model$type=='constantoutbreak'){
LL <- 100*(1-exp(-chains$annual_foi))
params <- add.quantiles.text(params,
variable  = LL,
name = paste0('Annual Prob. Infection (in %)_',i),
quants= quants,
quantilestext=quantilestext )
}
if(FOIfit$model$type=='independent' | FOIfit$model$type=='independent_group'){
L = chains$lambda
for(k in seq(1,dim(L)[2])){
params <- add.quantiles.text(params,
variable=L[,k],
name = paste0('Y_',max(FOIfit$data$sampling_year)-k),
quants=quants,
quantilestext=quantilestext)
}
}
if(FOIfit$model$seroreversion){
rho = chains$rho
params <- add.quantiles.text(params,
variable=rho,
name = paste('rho'),
quants = quants,
quantilestext=quantilestext )
}
d= FOIfit$data$category.position.in.table
if(FOIfit$model$cat_lambda & dim(d)[1]>0){
for(i in seq(1,dim(d)[1])){
name <- paste0('FOI of category ', d[i,]$predictor, " relative to " ,  d[i,]$relative_to)
params <- add.quantiles.text(params,
variable=chainsout$Flambda[,d[i,]$index],
name = name,
quants= quants,
quantilestext=quantilestext )
}
}
names(params) <- quantilestext
quantilestext
FOIfit
FOIfit$model$type
FOIfit$model$type %in% model.list('All models')
FOIfit$model$type %in% model.list('I models')
source("~/Dropbox/Scientific_Projects/Rsero/R/parameters_credible_intervals.R", echo=TRUE)
parameters_credible_intervals(Fit_2)
quantilestext
source("~/Dropbox/Scientific_Projects/Rsero/R/parameters_credible_intervals.R", echo=TRUE)
model
model = list()
model[[1]] = FOImodel(type='constant')
model[[2]] = FOImodel(type='intervention', K=2)
model[[3]] = FOImodel(type='intervention', K=3)
model[[4]] = FOImodel(type='outbreak', K=1)
model[[5]] = FOImodel(type='outbreak', K=2)
model[[6]] = FOImodel(type='constantoutbreak', K=1)
model[[7]] = FOImodel(type='constantoutbreak', K=2)
model[[8]] = FOImodel(type='independent')
model[[9]] = FOImodel(type='constant', sp=0.95, se=0.99)
model[[10]] = FOImodel(type='outbreak', K=1, sp=0.95, se=0.99)
model[[11]] = FOImodel(type='constant', seroreversion = 1)
model[[10]]
Fit_3 = fit(data = chik.sero.aggregated,
model = model[[10]],
chain=4,
cores=4,
iter=5000)
parameters_credible_intervals(Fit_3)
source("~/Dropbox/Scientific_Projects/Rsero/R/parameters_credible_intervals.R", echo=TRUE)
parameters_credible_intervals(Fit_3)
FOIfit= Fit_3
chains <- rstan::extract(FOIfit$fit)
chainsout= chains
quantilestext  = paste0(quants*100,'%')
quantilestext[4]  = 'mean'
params <- NULL
if(FOIfit$model$type %in% model.list('All models')){
if(FOIfit$model$type  %in% model.list('Outbreak models')){
C<- chains$T
Torder <- data.frame(C, t(apply(-C, 1, rank, ties.method='min')))
K=FOIfit$model$K
Ranks <- matrix(0,ncol(C),nrow(C))
YearMax <- max(FOIfit$data$sampling_year)
Years = Time = matrix(0,ncol(C),nrow(C))
for (i in 1:K) {
Ranks[i, ] <- which(apply(C,1,function(x) rank(x)) == i);
Years[i, ] <- YearMax - t(C)[Ranks[i,]]+1
Time[i, ] <-  t(C)[Ranks[i,]]+1
}
for(i in 1:K){
chainsout$Years[,i] <- t(Years[i, ])
chainsout$T[,i] <- t(Time[i, ])
chainsout$alpha[, i] <- t(chains$alpha)[Ranks[i, ]]
# chainsout$beta[, i] <- t(chains$beta)[Ranks[i, ]]
params <- add.quantiles.text(params,
variable=chainsout$T[,i],
name = paste('T',i),
quants= quants,
quantilestext=quantilestext)
params <- add.quantiles.text(params,
variable=chainsout$Years[,i],
name = paste('Year',i),
quants= quants,
quantilestext=quantilestext)
name <- paste('alpha',i)
params <- add.quantiles.text(params,
variable=chainsout$alpha[,i],
name = name,
quants= quants,
quantilestext=quantilestext )
# params <- add.quantiles.text(params,
#                              variable  = chainsout$beta[,i],
#                              name = paste('beta',i),
#                              quants= quants,
#                              quantilestext=quantilestext )
#
params <- add.quantiles.text(params,
variable  = 1-exp(-chainsout$alpha[,i]),
name = paste('Outbreak Prob. Inf. ',i),
quants= quants,
quantilestext=quantilestext )
}
}
if(FOIfit$model$type %in% model.list('I models')){
K=FOIfit$model$K
C<- chains$Time
YearMax <- max(FOIfit$data$sampling_year)
Years  <- YearMax - C+1
for(i in 1:K){
if (i>1){
params <- add.quantiles.text(params, variable  = Years[,i],
name = paste('Year_',i),
quants= quants,
quantilestext=quantilestext )
}
LL <- 100*(1-exp(-chains$annual_foi[,i]))
params <- add.quantiles.text(params,
variable  = LL,
name = paste0('Annual Prob. Infection (in %)_',i),
quants= quants,
quantilestext=quantilestext )
}
}
if(FOIfit$model$type=='constant'){
LL <- chains$annual_foi
params <- add.quantiles.text(params,
variable  = LL,
name = "Force of Infection",
quants= quants,
quantilestext=quantilestext )
LL <- 100*(1-exp(-chains$annual_foi))
params <- add.quantiles.text(params,
variable  = LL,
name = 'Annual Prob. Infection (in %)',
quants= quants,
quantilestext=quantilestext )
}
if(FOIfit$model$type=='constantoutbreak'){
LL <- chains$annual_foi
params <- add.quantiles.text(params,
variable  = LL,
name = "Force of Infection",
quants= quants,
quantilestext=quantilestext )
LL <- 100*(1-exp(-chains$annual_foi))
params <- add.quantiles.text(params,
variable  = LL,
name = 'Annual Prob. Infection (in %)',
quants= quants,
quantilestext=quantilestext )
}
if(FOIfit$model$type=='independent' | FOIfit$model$type=='independent_group'){
L = chains$lambda
for(k in seq(1,dim(L)[2])){
params <- add.quantiles.text(params,
variable=L[,k],
name = paste0('Y_',max(FOIfit$data$sampling_year)-k),
quants=quants,
quantilestext=quantilestext)
}
}
if(FOIfit$model$seroreversion){
rho = chains$rho
params <- add.quantiles.text(params,
variable=rho,
name = paste('rho'),
quants = quants,
quantilestext=quantilestext )
}
}
FOIfit$model$type
C<- chains$T
Torder <- data.frame(C, t(apply(-C, 1, rank, ties.method='min')))
K=FOIfit$model$K
Ranks <- matrix(0,ncol(C),nrow(C))
YearMax <- max(FOIfit$data$sampling_year)
Years = Time = matrix(0,ncol(C),nrow(C))
Years
K
for (i in 1:K) {
Ranks[i, ] <- which(apply(C,1,function(x) rank(x)) == i);
Years[i, ] <- YearMax - t(C)[Ranks[i,]]+1
Time[i, ] <-  t(C)[Ranks[i,]]+1
}
Time
dim(Time)
dim(Years)
chainsout$Years[,i] <- t(Years[i, ])
t(Years[i, ])
chainsout$Years[,i] <- t(Years[i, ])
# params <- add.quantiles.text(params,
#                              variable  = chainsout$beta[,i],
#                              name = paste('beta',i),
#                              quants= quants,
#                              quantilestext=quantilestext )
#
params <- add.quantiles.text(params,
variable  = 1-exp(-chainsout$alpha[,i]),
name = paste('Outbreak Prob. Inf. ',i),
quants= quants,
quantilestext=quantilestext )
params
t(Years[i, ])
Ranks
typeof(Ranks)
Ranks[1,]
C
chainsout$Years[,i] <- t(Years[i, ])
dim(Years)
i
Years[1,]
Years[i, ]
t(Years[i, ])
t(as.matrix(Years[i, ]))
t(as.array(Years[i, ]))
dim(  chainsout$Years)
chainsout$Years = 1
add.quantiles.text
source("~/Dropbox/Scientific_Projects/Rsero/R/parameters_credible_intervals.R", echo=TRUE)
parameters_credible_intervals(Fit_3)
setwd("~/Dropbox/Scientific_Projects/TestsRsero")
# devtools::document()
#
# create documentation
pack <- "Rsero"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(Rsero)
# devtools::document()
#
# create documentation
pack <- "Rsero"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(Rsero)
rm(list=ls())
devtools::install_local(path='../Rsero', force = TRUE)
getwd()
# create documentation
pack <- "Rsero"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
# create documentation
pack <- "Rsero"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
setwd('../Rsero/vignettes/')
ls

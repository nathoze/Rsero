/*
    Rsero is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Rsero is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Rsero.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_independent_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'independent', line 28, column 2 to column 33)",
                                                      " (in 'independent', line 29, column 2 to column 34)",
                                                      " (in 'independent', line 30, column 2 to column 46)",
                                                      " (in 'independent', line 33, column 2 to column 12)",
                                                      " (in 'independent', line 34, column 2 to column 9)",
                                                      " (in 'independent', line 35, column 2 to column 53)",
                                                      " (in 'independent', line 36, column 2 to column 52)",
                                                      " (in 'independent', line 37, column 2 to column 36)",
                                                      " (in 'independent', line 38, column 2 to column 41)",
                                                      " (in 'independent', line 39, column 2 to column 9)",
                                                      " (in 'independent', line 41, column 2 to column 6)",
                                                      " (in 'independent', line 48, column 6 to column 12)",
                                                      " (in 'independent', line 51, column 8 to column 48)",
                                                      " (in 'independent', line 50, column 33 to line 52, column 9)",
                                                      " (in 'independent', line 50, column 8 to line 52, column 9)",
                                                      " (in 'independent', line 49, column 32 to line 53, column 7)",
                                                      " (in 'independent', line 49, column 6 to line 53, column 7)",
                                                      " (in 'independent', line 54, column 6 to column 27)",
                                                      " (in 'independent', line 47, column 25 to line 55, column 5)",
                                                      " (in 'independent', line 47, column 4 to line 55, column 5)",
                                                      " (in 'independent', line 46, column 7 to line 56, column 3)",
                                                      " (in 'independent', line 44, column 6 to column 21)",
                                                      " (in 'independent', line 43, column 25 to line 45, column 5)",
                                                      " (in 'independent', line 43, column 4 to line 45, column 5)",
                                                      " (in 'independent', line 42, column 17 to line 46, column 3)",
                                                      " (in 'independent', line 42, column 2 to line 56, column 3)",
                                                      " (in 'independent', line 58, column 2 to column 6)",
                                                      " (in 'independent', line 62, column 8 to column 48)",
                                                      " (in 'independent', line 65, column 10 to column 17)",
                                                      " (in 'independent', line 69, column 12 to column 65)",
                                                      " (in 'independent', line 68, column 15 to line 70, column 11)",
                                                      " (in 'independent', line 67, column 12 to column 54)",
                                                      " (in 'independent', line 66, column 30 to line 68, column 11)",
                                                      " (in 'independent', line 66, column 10 to line 70, column 11)",
                                                      " (in 'independent', line 63, column 23 to line 71, column 9)",
                                                      " (in 'independent', line 63, column 8 to line 71, column 9)",
                                                      " (in 'independent', line 72, column 8 to column 15)",
                                                      " (in 'independent', line 61, column 27 to line 73, column 7)",
                                                      " (in 'independent', line 61, column 6 to line 73, column 7)",
                                                      " (in 'independent', line 60, column 26 to line 74, column 5)",
                                                      " (in 'independent', line 60, column 4 to line 74, column 5)",
                                                      " (in 'independent', line 59, column 22 to line 75, column 3)",
                                                      " (in 'independent', line 59, column 2 to line 75, column 3)",
                                                      " (in 'independent', line 79, column 8 to column 16)",
                                                      " (in 'independent', line 81, column 10 to column 45)",
                                                      " (in 'independent', line 80, column 21 to line 82, column 9)",
                                                      " (in 'independent', line 80, column 8 to line 82, column 9)",
                                                      " (in 'independent', line 86, column 10 to column 46)",
                                                      " (in 'independent', line 87, column 10 to column 49)",
                                                      " (in 'independent', line 90, column 14 to column 41)",
                                                      " (in 'independent', line 91, column 14 to column 82)",
                                                      " (in 'independent', line 89, column 25 to line 92, column 13)",
                                                      " (in 'independent', line 89, column 12 to line 92, column 13)",
                                                      " (in 'independent', line 88, column 18 to line 93, column 11)",
                                                      " (in 'independent', line 88, column 10 to line 93, column 11)",
                                                      " (in 'independent', line 94, column 10 to column 41)",
                                                      " (in 'independent', line 84, column 21 to line 96, column 9)",
                                                      " (in 'independent', line 84, column 8 to line 96, column 9)",
                                                      " (in 'independent', line 78, column 27 to line 97, column 7)",
                                                      " (in 'independent', line 78, column 6 to line 97, column 7)",
                                                      " (in 'independent', line 77, column 26 to line 98, column 5)",
                                                      " (in 'independent', line 77, column 4 to line 98, column 5)",
                                                      " (in 'independent', line 76, column 22 to line 99, column 3)",
                                                      " (in 'independent', line 76, column 2 to line 99, column 3)",
                                                      " (in 'independent', line 104, column 8 to column 19)",
                                                      " (in 'independent', line 106, column 10 to column 41)",
                                                      " (in 'independent', line 105, column 41 to line 107, column 9)",
                                                      " (in 'independent', line 105, column 8 to line 107, column 9)",
                                                      " (in 'independent', line 108, column 8 to column 56)",
                                                      " (in 'independent', line 103, column 19 to line 109, column 7)",
                                                      " (in 'independent', line 103, column 6 to line 109, column 7)",
                                                      " (in 'independent', line 102, column 25 to line 110, column 5)",
                                                      " (in 'independent', line 102, column 4 to line 110, column 5)",
                                                      " (in 'independent', line 101, column 24 to line 111, column 3)",
                                                      " (in 'independent', line 101, column 2 to line 111, column 3)",
                                                      " (in 'independent', line 115, column 4 to column 72)",
                                                      " (in 'independent', line 113, column 15 to line 116, column 3)",
                                                      " (in 'independent', line 113, column 2 to line 116, column 3)",
                                                      " (in 'independent', line 121, column 4 to column 41)",
                                                      " (in 'independent', line 120, column 23 to line 122, column 3)",
                                                      " (in 'independent', line 120, column 2 to line 122, column 3)",
                                                      " (in 'independent', line 126, column 6 to column 38)",
                                                      " (in 'independent', line 125, column 28 to line 127, column 5)",
                                                      " (in 'independent', line 125, column 4 to line 127, column 5)",
                                                      " (in 'independent', line 124, column 28 to line 128, column 3)",
                                                      " (in 'independent', line 124, column 2 to line 128, column 3)",
                                                      " (in 'independent', line 129, column 2 to column 31)",
                                                      " (in 'independent', line 132, column 4 to column 52)",
                                                      " (in 'independent', line 131, column 17 to line 133, column 3)",
                                                      " (in 'independent', line 131, column 2 to line 133, column 3)",
                                                      " (in 'independent', line 2, column 2 to column 18)",
                                                      " (in 'independent', line 3, column 2 to column 28)",
                                                      " (in 'independent', line 4, column 23 to column 24)",
                                                      " (in 'independent', line 4, column 25 to column 35)",
                                                      " (in 'independent', line 4, column 2 to column 37)",
                                                      " (in 'independent', line 5, column 23 to column 24)",
                                                      " (in 'independent', line 5, column 25 to column 35)",
                                                      " (in 'independent', line 5, column 2 to column 37)",
                                                      " (in 'independent', line 6, column 2 to column 24)",
                                                      " (in 'independent', line 7, column 2 to column 18)",
                                                      " (in 'independent', line 8, column 20 to column 21)",
                                                      " (in 'independent', line 8, column 2 to column 23)",
                                                      " (in 'independent', line 9, column 27 to column 28)",
                                                      " (in 'independent', line 9, column 2 to column 30)",
                                                      " (in 'independent', line 10, column 2 to column 40)",
                                                      " (in 'independent', line 11, column 30 to column 31)",
                                                      " (in 'independent', line 11, column 2 to column 33)",
                                                      " (in 'independent', line 12, column 2 to column 26)",
                                                      " (in 'independent', line 13, column 2 to column 31)",
                                                      " (in 'independent', line 14, column 2 to column 28)",
                                                      " (in 'independent', line 15, column 30 to column 39)",
                                                      " (in 'independent', line 15, column 40 to column 54)",
                                                      " (in 'independent', line 15, column 2 to column 56)",
                                                      " (in 'independent', line 16, column 32 to column 33)",
                                                      " (in 'independent', line 16, column 2 to column 35)",
                                                      " (in 'independent', line 17, column 30 to column 31)",
                                                      " (in 'independent', line 17, column 2 to column 33)",
                                                      " (in 'independent', line 18, column 26 to column 27)",
                                                      " (in 'independent', line 18, column 2 to column 30)",
                                                      " (in 'independent', line 19, column 28 to column 38)",
                                                      " (in 'independent', line 19, column 2 to column 40)",
                                                      " (in 'independent', line 20, column 2 to column 27)",
                                                      " (in 'independent', line 21, column 2 to column 27)",
                                                      " (in 'independent', line 22, column 2 to column 28)",
                                                      " (in 'independent', line 23, column 2 to column 29)",
                                                      " (in 'independent', line 24, column 2 to column 29)",
                                                      " (in 'independent', line 25, column 2 to column 29)",
                                                      " (in 'independent', line 28, column 24 to column 31)",
                                                      " (in 'independent', line 30, column 17 to column 29)",
                                                      " (in 'independent', line 30, column 30 to column 44)",
                                                      " (in 'independent', line 33, column 9 to column 10)",
                                                      " (in 'independent', line 35, column 29 to column 30)",
                                                      " (in 'independent', line 35, column 31 to column 41)",
                                                      " (in 'independent', line 35, column 42 to column 51)",
                                                      " (in 'independent', line 36, column 28 to column 29)",
                                                      " (in 'independent', line 36, column 30 to column 40)",
                                                      " (in 'independent', line 36, column 41 to column 50)",
                                                      " (in 'independent', line 37, column 25 to column 34)",
                                                      " (in 'independent', line 38, column 38 to column 39)"};
class model_independent final : public model_base_crtp<model_independent> {
private:
  int A;
  int NAgeGroups;
  std::vector<std::vector<int>> class1;
  std::vector<std::vector<int>> class2;
  int NGroups;
  int N;
  std::vector<int> age;
  std::vector<int> Y;
  int seroreversion;
  std::vector<int> categoryindex;
  int Ncategory;
  int Ncategoryclass;
  int maxNcategory;
  std::vector<std::vector<int>> MatrixCategory;
  std::vector<int> age_at_sampling;
  std::vector<int> sampling_year;
  std::vector<int> age_group;
  std::vector<int> age_at_init;
  double priorY1;
  double priorY2;
  double priorRho;
  double se;
  double sp;
  int cat_lambda;
 
public:
  ~model_independent() { }
  
  inline std::string model_name() const final { return "model_independent"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_independent(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_independent_namespace::model_independent";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 91;
      context__.validate_dims("data initialization","A","int",
          context__.to_vec());
      A = std::numeric_limits<int>::min();
      
      current_statement__ = 91;
      A = context__.vals_i("A")[(1 - 1)];
      current_statement__ = 91;
      current_statement__ = 91;
      check_greater_or_equal(function__, "A", A, 0);
      current_statement__ = 92;
      context__.validate_dims("data initialization","NAgeGroups","int",
          context__.to_vec());
      NAgeGroups = std::numeric_limits<int>::min();
      
      current_statement__ = 92;
      NAgeGroups = context__.vals_i("NAgeGroups")[(1 - 1)];
      current_statement__ = 92;
      current_statement__ = 92;
      check_greater_or_equal(function__, "NAgeGroups", NAgeGroups, 1);
      current_statement__ = 93;
      validate_non_negative_index("class1", "A", A);
      current_statement__ = 94;
      validate_non_negative_index("class1", "NAgeGroups", NAgeGroups);
      current_statement__ = 95;
      context__.validate_dims("data initialization","class1","int",
          context__.to_vec(A, NAgeGroups));
      class1 = std::vector<std::vector<int>>(A, std::vector<int>(NAgeGroups, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> class1_flat__;
        current_statement__ = 95;
        assign(class1_flat__, nil_index_list(), context__.vals_i("class1"),
          "assigning variable class1_flat__");
        current_statement__ = 95;
        pos__ = 1;
        current_statement__ = 95;
        for (int sym1__ = 1; sym1__ <= NAgeGroups; ++sym1__) {
          current_statement__ = 95;
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            current_statement__ = 95;
            assign(class1,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              class1_flat__[(pos__ - 1)], "assigning variable class1");
            current_statement__ = 95;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 95;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 95;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 95;
          current_statement__ = 95;
          check_greater_or_equal(function__, "class1[sym1__, sym2__]",
                                 class1[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 96;
      validate_non_negative_index("class2", "A", A);
      current_statement__ = 97;
      validate_non_negative_index("class2", "NAgeGroups", NAgeGroups);
      current_statement__ = 98;
      context__.validate_dims("data initialization","class2","int",
          context__.to_vec(A, NAgeGroups));
      class2 = std::vector<std::vector<int>>(A, std::vector<int>(NAgeGroups, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> class2_flat__;
        current_statement__ = 98;
        assign(class2_flat__, nil_index_list(), context__.vals_i("class2"),
          "assigning variable class2_flat__");
        current_statement__ = 98;
        pos__ = 1;
        current_statement__ = 98;
        for (int sym1__ = 1; sym1__ <= NAgeGroups; ++sym1__) {
          current_statement__ = 98;
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            current_statement__ = 98;
            assign(class2,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              class2_flat__[(pos__ - 1)], "assigning variable class2");
            current_statement__ = 98;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 98;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 98;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 98;
          current_statement__ = 98;
          check_greater_or_equal(function__, "class2[sym1__, sym2__]",
                                 class2[(sym1__ - 1)][(sym2__ - 1)], 1);}}
      current_statement__ = 99;
      context__.validate_dims("data initialization","NGroups","int",
          context__.to_vec());
      NGroups = std::numeric_limits<int>::min();
      
      current_statement__ = 99;
      NGroups = context__.vals_i("NGroups")[(1 - 1)];
      current_statement__ = 99;
      current_statement__ = 99;
      check_greater_or_equal(function__, "NGroups", NGroups, 0);
      current_statement__ = 100;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 100;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 100;
      current_statement__ = 100;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 101;
      validate_non_negative_index("age", "N", N);
      current_statement__ = 102;
      context__.validate_dims("data initialization","age","int",
          context__.to_vec(N));
      age = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 102;
      assign(age, nil_index_list(), context__.vals_i("age"),
        "assigning variable age");
      current_statement__ = 102;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 102;
        current_statement__ = 102;
        check_greater_or_equal(function__, "age[sym1__]", age[(sym1__ - 1)],
                               0);}
      current_statement__ = 103;
      validate_non_negative_index("Y", "N", N);
      current_statement__ = 104;
      context__.validate_dims("data initialization","Y","int",
          context__.to_vec(N));
      Y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 104;
      assign(Y, nil_index_list(), context__.vals_i("Y"),
        "assigning variable Y");
      current_statement__ = 104;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 104;
        current_statement__ = 104;
        check_greater_or_equal(function__, "Y[sym1__]", Y[(sym1__ - 1)], 0);}
      current_statement__ = 104;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 104;
        current_statement__ = 104;
        check_less_or_equal(function__, "Y[sym1__]", Y[(sym1__ - 1)], 1);}
      current_statement__ = 105;
      context__.validate_dims("data initialization","seroreversion","int",
          context__.to_vec());
      seroreversion = std::numeric_limits<int>::min();
      
      current_statement__ = 105;
      seroreversion = context__.vals_i("seroreversion")[(1 - 1)];
      current_statement__ = 105;
      current_statement__ = 105;
      check_greater_or_equal(function__, "seroreversion", seroreversion, 0);
      current_statement__ = 105;
      current_statement__ = 105;
      check_less_or_equal(function__, "seroreversion", seroreversion, 1);
      current_statement__ = 106;
      validate_non_negative_index("categoryindex", "N", N);
      current_statement__ = 107;
      context__.validate_dims("data initialization","categoryindex","int",
          context__.to_vec(N));
      categoryindex = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 107;
      assign(categoryindex, nil_index_list(),
        context__.vals_i("categoryindex"), "assigning variable categoryindex");
      current_statement__ = 107;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 107;
        current_statement__ = 107;
        check_greater_or_equal(function__, "categoryindex[sym1__]",
                               categoryindex[(sym1__ - 1)], 1);}
      current_statement__ = 108;
      context__.validate_dims("data initialization","Ncategory","int",
          context__.to_vec());
      Ncategory = std::numeric_limits<int>::min();
      
      current_statement__ = 108;
      Ncategory = context__.vals_i("Ncategory")[(1 - 1)];
      current_statement__ = 108;
      current_statement__ = 108;
      check_greater_or_equal(function__, "Ncategory", Ncategory, 1);
      current_statement__ = 109;
      context__.validate_dims("data initialization","Ncategoryclass","int",
          context__.to_vec());
      Ncategoryclass = std::numeric_limits<int>::min();
      
      current_statement__ = 109;
      Ncategoryclass = context__.vals_i("Ncategoryclass")[(1 - 1)];
      current_statement__ = 109;
      current_statement__ = 109;
      check_greater_or_equal(function__, "Ncategoryclass", Ncategoryclass, 1);
      current_statement__ = 110;
      context__.validate_dims("data initialization","maxNcategory","int",
          context__.to_vec());
      maxNcategory = std::numeric_limits<int>::min();
      
      current_statement__ = 110;
      maxNcategory = context__.vals_i("maxNcategory")[(1 - 1)];
      current_statement__ = 110;
      current_statement__ = 110;
      check_greater_or_equal(function__, "maxNcategory", maxNcategory, 1);
      current_statement__ = 111;
      validate_non_negative_index("MatrixCategory", "Ncategory", Ncategory);
      current_statement__ = 112;
      validate_non_negative_index("MatrixCategory", "Ncategoryclass",
                                  Ncategoryclass);
      current_statement__ = 113;
      context__.validate_dims("data initialization","MatrixCategory","int",
          context__.to_vec(Ncategory, Ncategoryclass));
      MatrixCategory = std::vector<std::vector<int>>(Ncategory, std::vector<int>(Ncategoryclass, std::numeric_limits<int>::min()));
      
      {
        std::vector<int> MatrixCategory_flat__;
        current_statement__ = 113;
        assign(MatrixCategory_flat__, nil_index_list(),
          context__.vals_i("MatrixCategory"),
          "assigning variable MatrixCategory_flat__");
        current_statement__ = 113;
        pos__ = 1;
        current_statement__ = 113;
        for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
          current_statement__ = 113;
          for (int sym2__ = 1; sym2__ <= Ncategory; ++sym2__) {
            current_statement__ = 113;
            assign(MatrixCategory,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              MatrixCategory_flat__[(pos__ - 1)],
              "assigning variable MatrixCategory");
            current_statement__ = 113;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 113;
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        current_statement__ = 113;
        for (int sym2__ = 1; sym2__ <= Ncategoryclass; ++sym2__) {
          current_statement__ = 113;
          current_statement__ = 113;
          check_greater_or_equal(function__,
                                 "MatrixCategory[sym1__, sym2__]",
                                 MatrixCategory[(sym1__ - 1)][(sym2__ - 1)],
                                 1);}}
      current_statement__ = 114;
      validate_non_negative_index("age_at_sampling", "N", N);
      current_statement__ = 115;
      context__.validate_dims("data initialization","age_at_sampling","int",
          context__.to_vec(N));
      age_at_sampling = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 115;
      assign(age_at_sampling, nil_index_list(),
        context__.vals_i("age_at_sampling"),
        "assigning variable age_at_sampling");
      current_statement__ = 115;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 115;
        current_statement__ = 115;
        check_greater_or_equal(function__, "age_at_sampling[sym1__]",
                               age_at_sampling[(sym1__ - 1)], 0);}
      current_statement__ = 116;
      validate_non_negative_index("sampling_year", "N", N);
      current_statement__ = 117;
      context__.validate_dims("data initialization","sampling_year","int",
          context__.to_vec(N));
      sampling_year = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 117;
      assign(sampling_year, nil_index_list(),
        context__.vals_i("sampling_year"), "assigning variable sampling_year");
      current_statement__ = 117;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 117;
        current_statement__ = 117;
        check_greater_or_equal(function__, "sampling_year[sym1__]",
                               sampling_year[(sym1__ - 1)], 0);}
      current_statement__ = 118;
      validate_non_negative_index("age_group", "N", N);
      current_statement__ = 119;
      context__.validate_dims("data initialization","age_group","int",
          context__.to_vec(N));
      age_group = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 119;
      assign(age_group, nil_index_list(), context__.vals_i("age_group"),
        "assigning variable age_group");
      current_statement__ = 119;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 119;
        current_statement__ = 119;
        check_greater_or_equal(function__, "age_group[sym1__]",
                               age_group[(sym1__ - 1)], 1);}
      current_statement__ = 120;
      validate_non_negative_index("age_at_init", "NAgeGroups", NAgeGroups);
      current_statement__ = 121;
      context__.validate_dims("data initialization","age_at_init","int",
          context__.to_vec(NAgeGroups));
      age_at_init = std::vector<int>(NAgeGroups, std::numeric_limits<int>::min());
      
      current_statement__ = 121;
      assign(age_at_init, nil_index_list(), context__.vals_i("age_at_init"),
        "assigning variable age_at_init");
      current_statement__ = 121;
      for (int sym1__ = 1; sym1__ <= NAgeGroups; ++sym1__) {
        current_statement__ = 121;
        current_statement__ = 121;
        check_greater_or_equal(function__, "age_at_init[sym1__]",
                               age_at_init[(sym1__ - 1)], 1);}
      current_statement__ = 122;
      context__.validate_dims("data initialization","priorY1","double",
          context__.to_vec());
      priorY1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 122;
      priorY1 = context__.vals_r("priorY1")[(1 - 1)];
      current_statement__ = 122;
      current_statement__ = 122;
      check_greater_or_equal(function__, "priorY1", priorY1, 0);
      current_statement__ = 123;
      context__.validate_dims("data initialization","priorY2","double",
          context__.to_vec());
      priorY2 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 123;
      priorY2 = context__.vals_r("priorY2")[(1 - 1)];
      current_statement__ = 123;
      current_statement__ = 123;
      check_greater_or_equal(function__, "priorY2", priorY2, 0);
      current_statement__ = 124;
      context__.validate_dims("data initialization","priorRho","double",
          context__.to_vec());
      priorRho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 124;
      priorRho = context__.vals_r("priorRho")[(1 - 1)];
      current_statement__ = 124;
      current_statement__ = 124;
      check_greater_or_equal(function__, "priorRho", priorRho, 0);
      current_statement__ = 125;
      context__.validate_dims("data initialization","se","double",
          context__.to_vec());
      se = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 125;
      se = context__.vals_r("se")[(1 - 1)];
      current_statement__ = 125;
      current_statement__ = 125;
      check_greater_or_equal(function__, "se", se, 0);
      current_statement__ = 125;
      current_statement__ = 125;
      check_less_or_equal(function__, "se", se, 1);
      current_statement__ = 126;
      context__.validate_dims("data initialization","sp","double",
          context__.to_vec());
      sp = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 126;
      sp = context__.vals_r("sp")[(1 - 1)];
      current_statement__ = 126;
      current_statement__ = 126;
      check_greater_or_equal(function__, "sp", sp, 0);
      current_statement__ = 126;
      current_statement__ = 126;
      check_less_or_equal(function__, "sp", sp, 1);
      current_statement__ = 127;
      context__.validate_dims("data initialization","cat_lambda","int",
          context__.to_vec());
      cat_lambda = std::numeric_limits<int>::min();
      
      current_statement__ = 127;
      cat_lambda = context__.vals_i("cat_lambda")[(1 - 1)];
      current_statement__ = 127;
      current_statement__ = 127;
      check_greater_or_equal(function__, "cat_lambda", cat_lambda, 0);
      current_statement__ = 128;
      validate_non_negative_index("lambda", "NGroups", NGroups);
      current_statement__ = 129;
      validate_non_negative_index("Flambda2", "maxNcategory", maxNcategory);
      current_statement__ = 130;
      validate_non_negative_index("Flambda2", "Ncategoryclass",
                                  Ncategoryclass);
      current_statement__ = 131;
      validate_non_negative_index("x", "A", A);
      current_statement__ = 132;
      validate_non_negative_index("P1", "A", A);
      current_statement__ = 133;
      validate_non_negative_index("P1", "NAgeGroups", NAgeGroups);
      current_statement__ = 134;
      validate_non_negative_index("P1", "Ncategory", Ncategory);
      current_statement__ = 135;
      validate_non_negative_index("P", "A", A);
      current_statement__ = 136;
      validate_non_negative_index("P", "NAgeGroups", NAgeGroups);
      current_statement__ = 137;
      validate_non_negative_index("P", "Ncategory", Ncategory);
      current_statement__ = 138;
      validate_non_negative_index("Flambda", "Ncategory", Ncategory);
      current_statement__ = 139;
      validate_non_negative_index("Likelihood", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += NGroups;
      num_params_r__ += 1;
      num_params_r__ += maxNcategory * Ncategoryclass;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_independent_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<local_scalar_t__> lambda;
      lambda = std::vector<local_scalar_t__>(NGroups, DUMMY_VAR__);
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NGroups; ++sym1__) {
        current_statement__ = 1;
        assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lambda");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NGroups; ++sym1__) {
        current_statement__ = 1;
        if (jacobian__) {
          current_statement__ = 1;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda[(sym1__ - 1)], 0, lp__),
            "assigning variable lambda");
        } else {
          current_statement__ = 1;
          assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
            stan::math::lb_constrain(lambda[(sym1__ - 1)], 0),
            "assigning variable lambda");
        }}
      local_scalar_t__ rho;
      rho = DUMMY_VAR__;
      
      current_statement__ = 2;
      rho = in__.scalar();
      current_statement__ = 2;
      if (jacobian__) {
        current_statement__ = 2;
        rho = stan::math::lub_constrain(rho, 0, 20, lp__);
      } else {
        current_statement__ = 2;
        rho = stan::math::lub_constrain(rho, 0, 20);
      }
      std::vector<std::vector<local_scalar_t__>> Flambda2;
      Flambda2 = std::vector<std::vector<local_scalar_t__>>(maxNcategory, std::vector<local_scalar_t__>(Ncategoryclass, DUMMY_VAR__));
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= maxNcategory; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= Ncategoryclass; ++sym2__) {
          current_statement__ = 3;
          assign(Flambda2,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable Flambda2");}}
      std::vector<local_scalar_t__> x;
      x = std::vector<local_scalar_t__>(A, DUMMY_VAR__);
      
      local_scalar_t__ L;
      L = DUMMY_VAR__;
      
      std::vector<std::vector<std::vector<local_scalar_t__>>> P1;
      P1 = std::vector<std::vector<std::vector<local_scalar_t__>>>(A, std::vector<std::vector<local_scalar_t__>>(NAgeGroups, std::vector<local_scalar_t__>(Ncategory, DUMMY_VAR__)));
      
      std::vector<std::vector<std::vector<local_scalar_t__>>> P;
      P = std::vector<std::vector<std::vector<local_scalar_t__>>>(A, std::vector<std::vector<local_scalar_t__>>(NAgeGroups, std::vector<local_scalar_t__>(Ncategory, DUMMY_VAR__)));
      
      std::vector<local_scalar_t__> Flambda;
      Flambda = std::vector<local_scalar_t__>(Ncategory, DUMMY_VAR__);
      
      std::vector<local_scalar_t__> Likelihood;
      Likelihood = std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      
      local_scalar_t__ c;
      c = DUMMY_VAR__;
      
      current_statement__ = 11;
      c = 0;
      current_statement__ = 26;
      if (logical_negation(cat_lambda)) {
        current_statement__ = 24;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 22;
          assign(Flambda, cons_list(index_uni(i), nil_index_list()), 1,
            "assigning variable Flambda");}
      } else {
        current_statement__ = 20;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 12;
          c = 0;
          current_statement__ = 17;
          for (int I = 1; I <= Ncategoryclass; ++I) {
            current_statement__ = 15;
            if (logical_gt(MatrixCategory[(i - 1)][(I - 1)], 1)) {
              current_statement__ = 13;
              c = (c +
                    Flambda2[(MatrixCategory[(i - 1)][(I - 1)] - 1)][
                    (I - 1)]);
            } }
          current_statement__ = 18;
          assign(Flambda, cons_list(index_uni(i), nil_index_list()),
            stan::math::exp(c), "assigning variable Flambda");}
      }
      current_statement__ = 27;
      L = 1;
      current_statement__ = 43;
      if (logical_eq(seroreversion, 0)) {
        current_statement__ = 41;
        for (int J = 1; J <= NAgeGroups; ++J) {
          current_statement__ = 39;
          for (int i = 1; i <= Ncategory; ++i) {
            current_statement__ = 28;
            assign(P1,
              cons_list(index_uni(1),
                cons_list(index_uni(J),
                  cons_list(index_uni(i), nil_index_list()))),
              stan::math::exp((-Flambda[(i - 1)] * lambda[(1 - 1)])),
              "assigning variable P1");
            current_statement__ = 36;
            for (int j = 1; j <= (A - 1); ++j) {
              current_statement__ = 29;
              assign(x, cons_list(index_uni(j), nil_index_list()), 1,
                "assigning variable x");
              current_statement__ = 34;
              if (logical_lt(j, age_at_init[(J - 1)])) {
                current_statement__ = 32;
                assign(P1,
                  cons_list(index_uni((j + 1)),
                    cons_list(index_uni(J),
                      cons_list(index_uni(i), nil_index_list()))),
                  stan::math::exp((-Flambda[(i - 1)] * lambda[(j - 1)])),
                  "assigning variable P1");
              } else {
                current_statement__ = 30;
                assign(P1,
                  cons_list(index_uni((j + 1)),
                    cons_list(index_uni(J),
                      cons_list(index_uni(i), nil_index_list()))),
                  (P1[(j - 1)][(J - 1)][(i - 1)] *
                    stan::math::exp(
                      (-Flambda[(i - 1)] * lambda[((j + 1) - 1)]))),
                  "assigning variable P1");
              }}
            current_statement__ = 37;
            assign(x, cons_list(index_uni(A), nil_index_list()), 1,
              "assigning variable x");}}
      } 
      current_statement__ = 64;
      if (logical_eq(seroreversion, 1)) {
        current_statement__ = 62;
        for (int J = 1; J <= NAgeGroups; ++J) {
          current_statement__ = 60;
          for (int i = 1; i <= Ncategory; ++i) {
            current_statement__ = 44;
            assign(x, cons_list(index_uni(A), nil_index_list()), 1,
              "assigning variable x");
            current_statement__ = 47;
            for (int j = 1; j <= A; ++j) {
              current_statement__ = 45;
              assign(x, cons_list(index_uni(j), nil_index_list()),
                stan::math::exp((-Flambda[(i - 1)] * lambda[(1 - 1)])),
                "assigning variable x");}
            current_statement__ = 58;
            for (int j = 1; j <= A; ++j) {
              current_statement__ = 48;
              L = (Flambda[(i - 1)] * lambda[(age_at_init[(J - 1)] - 1)]);
              current_statement__ = 49;
              assign(x, cons_list(index_uni(j), nil_index_list()),
                ((rho / (L + rho)) + ((L / (L + rho)) * stan::math::exp(-L))),
                "assigning variable x");
              current_statement__ = 55;
              if (logical_gt(j, 1)) {
                current_statement__ = 53;
                for (int k = 2; k <= j; ++k) {
                  current_statement__ = 50;
                  L = (Flambda[(i - 1)] * lambda[(((j - k) + 2) - 1)]);
                  current_statement__ = 51;
                  assign(x,
                    cons_list(index_uni((((j - k) + 2) - 1)),
                      nil_index_list()),
                    ((x[(((j - k) + 2) - 1)] * stan::math::exp(-(rho + L))) +
                      ((rho / (L + rho)) * (1 - stan::math::exp(-(rho + L))))),
                    "assigning variable x");}
              } 
              current_statement__ = 56;
              assign(P1,
                cons_list(index_uni(j),
                  cons_list(index_uni(J),
                    cons_list(index_uni(i), nil_index_list()))),
                x[(age_at_init[(J - 1)] - 1)], "assigning variable P1");}}}
      } 
      current_statement__ = 75;
      for (int J = 1; J <= NAgeGroups; ++J) {
        current_statement__ = 73;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 71;
          for (int j = 1; j <= A; ++j) {
            current_statement__ = 65;
            assign(P,
              cons_list(index_uni(j),
                cons_list(index_uni(J),
                  cons_list(index_uni(i), nil_index_list()))), 0,
              "assigning variable P");
            current_statement__ = 68;
            for (int k = class1[(j - 1)][(J - 1)];
                 k <= class2[(j - 1)][(J - 1)]; ++k) {
              current_statement__ = 66;
              assign(P,
                cons_list(index_uni(j),
                  cons_list(index_uni(J),
                    cons_list(index_uni(i), nil_index_list()))),
                (P1[(k - 1)][(J - 1)][(i - 1)] +
                  P[(j - 1)][(J - 1)][(i - 1)]), "assigning variable P");}
            current_statement__ = 69;
            assign(P,
              cons_list(index_uni(j),
                cons_list(index_uni(J),
                  cons_list(index_uni(i), nil_index_list()))),
              (P[(j - 1)][(J - 1)][(i - 1)] /
                ((class2[(j - 1)][(J - 1)] - class1[(j - 1)][(J - 1)]) + 1)),
              "assigning variable P");}}}
      current_statement__ = 78;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 76;
        assign(Likelihood, cons_list(index_uni(j), nil_index_list()),
          (se -
            (((se + sp) - 1) *
              P[(age[(j - 1)] - 1)][(age_group[(j - 1)] - 1)][(categoryindex[
                                                                (j - 1)] - 1)])),
          "assigning variable Likelihood");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 6;
          for (int sym3__ = 1; sym3__ <= Ncategory; ++sym3__) {
            current_statement__ = 6;
            current_statement__ = 6;
            check_greater_or_equal(function__, "P1[sym1__, sym2__, sym3__]",
                                   P1[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)], 0);}
        }}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 6;
          for (int sym3__ = 1; sym3__ <= Ncategory; ++sym3__) {
            current_statement__ = 6;
            current_statement__ = 6;
            check_less_or_equal(function__, "P1[sym1__, sym2__, sym3__]",
                                P1[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                                1);}}}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= Ncategory; ++sym3__) {
            current_statement__ = 7;
            current_statement__ = 7;
            check_greater_or_equal(function__, "P[sym1__, sym2__, sym3__]",
                                   P[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                                   0);}}}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= Ncategory; ++sym3__) {
            current_statement__ = 7;
            current_statement__ = 7;
            check_less_or_equal(function__, "P[sym1__, sym2__, sym3__]",
                                P[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                                1);}}}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        current_statement__ = 8;
        current_statement__ = 8;
        check_greater_or_equal(function__, "Flambda[sym1__]",
                               Flambda[(sym1__ - 1)], 0);}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "Likelihood[sym1__]",
                               Likelihood[(sym1__ - 1)], 0);}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_less_or_equal(function__, "Likelihood[sym1__]",
                            Likelihood[(sym1__ - 1)], 1);}
      {
        current_statement__ = 81;
        for (int j = 1; j <= NGroups; ++j) {
          current_statement__ = 79;
          lp_accum__.add(
            uniform_lpdf<propto__>(lambda[(j - 1)], priorY1, priorY2));}
        current_statement__ = 86;
        for (int I = 1; I <= Ncategoryclass; ++I) {
          current_statement__ = 84;
          for (int i = 1; i <= maxNcategory; ++i) {
            current_statement__ = 82;
            lp_accum__.add(
              normal_lpdf<propto__>(Flambda2[(i - 1)][(I - 1)], 0, 1.73));}}
        current_statement__ = 87;
        lp_accum__.add(exponential_lpdf<propto__>(rho, priorRho));
        current_statement__ = 90;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 88;
          lp_accum__.add(
            bernoulli_lpmf<false>(Y[(j - 1)], Likelihood[(j - 1)]));}
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_independent_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      std::vector<double> lambda;
      lambda = std::vector<double>(NGroups, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NGroups; ++sym1__) {
        current_statement__ = 1;
        assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
          in__.scalar(), "assigning variable lambda");}
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NGroups; ++sym1__) {
        current_statement__ = 1;
        assign(lambda, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_constrain(lambda[(sym1__ - 1)], 0),
          "assigning variable lambda");}
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      rho = in__.scalar();
      current_statement__ = 2;
      rho = stan::math::lub_constrain(rho, 0, 20);
      std::vector<std::vector<double>> Flambda2;
      Flambda2 = std::vector<std::vector<double>>(maxNcategory, std::vector<double>(Ncategoryclass, std::numeric_limits<double>::quiet_NaN()));
      
      current_statement__ = 3;
      for (int sym1__ = 1; sym1__ <= maxNcategory; ++sym1__) {
        current_statement__ = 3;
        for (int sym2__ = 1; sym2__ <= Ncategoryclass; ++sym2__) {
          current_statement__ = 3;
          assign(Flambda2,
            cons_list(index_uni(sym1__),
              cons_list(index_uni(sym2__), nil_index_list())), in__.scalar(),
            "assigning variable Flambda2");}}
      std::vector<double> x;
      x = std::vector<double>(A, std::numeric_limits<double>::quiet_NaN());
      
      double L;
      L = std::numeric_limits<double>::quiet_NaN();
      
      std::vector<std::vector<std::vector<double>>> P1;
      P1 = std::vector<std::vector<std::vector<double>>>(A, std::vector<std::vector<double>>(NAgeGroups, std::vector<double>(Ncategory, std::numeric_limits<double>::quiet_NaN())));
      
      std::vector<std::vector<std::vector<double>>> P;
      P = std::vector<std::vector<std::vector<double>>>(A, std::vector<std::vector<double>>(NAgeGroups, std::vector<double>(Ncategory, std::numeric_limits<double>::quiet_NaN())));
      
      std::vector<double> Flambda;
      Flambda = std::vector<double>(Ncategory, std::numeric_limits<double>::quiet_NaN());
      
      std::vector<double> Likelihood;
      Likelihood = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      double c;
      c = std::numeric_limits<double>::quiet_NaN();
      
      for (int sym1__ = 1; sym1__ <= NGroups; ++sym1__) {
        vars__.emplace_back(lambda[(sym1__ - 1)]);}
      vars__.emplace_back(rho);
      for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= maxNcategory; ++sym2__) {
          vars__.emplace_back(Flambda2[(sym2__ - 1)][(sym1__ - 1)]);}}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 11;
      c = 0;
      current_statement__ = 26;
      if (logical_negation(cat_lambda)) {
        current_statement__ = 24;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 22;
          assign(Flambda, cons_list(index_uni(i), nil_index_list()), 1,
            "assigning variable Flambda");}
      } else {
        current_statement__ = 20;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 12;
          c = 0;
          current_statement__ = 17;
          for (int I = 1; I <= Ncategoryclass; ++I) {
            current_statement__ = 15;
            if (logical_gt(MatrixCategory[(i - 1)][(I - 1)], 1)) {
              current_statement__ = 13;
              c = (c +
                    Flambda2[(MatrixCategory[(i - 1)][(I - 1)] - 1)][
                    (I - 1)]);
            } }
          current_statement__ = 18;
          assign(Flambda, cons_list(index_uni(i), nil_index_list()),
            stan::math::exp(c), "assigning variable Flambda");}
      }
      current_statement__ = 27;
      L = 1;
      current_statement__ = 43;
      if (logical_eq(seroreversion, 0)) {
        current_statement__ = 41;
        for (int J = 1; J <= NAgeGroups; ++J) {
          current_statement__ = 39;
          for (int i = 1; i <= Ncategory; ++i) {
            current_statement__ = 28;
            assign(P1,
              cons_list(index_uni(1),
                cons_list(index_uni(J),
                  cons_list(index_uni(i), nil_index_list()))),
              stan::math::exp((-Flambda[(i - 1)] * lambda[(1 - 1)])),
              "assigning variable P1");
            current_statement__ = 36;
            for (int j = 1; j <= (A - 1); ++j) {
              current_statement__ = 29;
              assign(x, cons_list(index_uni(j), nil_index_list()), 1,
                "assigning variable x");
              current_statement__ = 34;
              if (logical_lt(j, age_at_init[(J - 1)])) {
                current_statement__ = 32;
                assign(P1,
                  cons_list(index_uni((j + 1)),
                    cons_list(index_uni(J),
                      cons_list(index_uni(i), nil_index_list()))),
                  stan::math::exp((-Flambda[(i - 1)] * lambda[(j - 1)])),
                  "assigning variable P1");
              } else {
                current_statement__ = 30;
                assign(P1,
                  cons_list(index_uni((j + 1)),
                    cons_list(index_uni(J),
                      cons_list(index_uni(i), nil_index_list()))),
                  (P1[(j - 1)][(J - 1)][(i - 1)] *
                    stan::math::exp(
                      (-Flambda[(i - 1)] * lambda[((j + 1) - 1)]))),
                  "assigning variable P1");
              }}
            current_statement__ = 37;
            assign(x, cons_list(index_uni(A), nil_index_list()), 1,
              "assigning variable x");}}
      } 
      current_statement__ = 64;
      if (logical_eq(seroreversion, 1)) {
        current_statement__ = 62;
        for (int J = 1; J <= NAgeGroups; ++J) {
          current_statement__ = 60;
          for (int i = 1; i <= Ncategory; ++i) {
            current_statement__ = 44;
            assign(x, cons_list(index_uni(A), nil_index_list()), 1,
              "assigning variable x");
            current_statement__ = 47;
            for (int j = 1; j <= A; ++j) {
              current_statement__ = 45;
              assign(x, cons_list(index_uni(j), nil_index_list()),
                stan::math::exp((-Flambda[(i - 1)] * lambda[(1 - 1)])),
                "assigning variable x");}
            current_statement__ = 58;
            for (int j = 1; j <= A; ++j) {
              current_statement__ = 48;
              L = (Flambda[(i - 1)] * lambda[(age_at_init[(J - 1)] - 1)]);
              current_statement__ = 49;
              assign(x, cons_list(index_uni(j), nil_index_list()),
                ((rho / (L + rho)) + ((L / (L + rho)) * stan::math::exp(-L))),
                "assigning variable x");
              current_statement__ = 55;
              if (logical_gt(j, 1)) {
                current_statement__ = 53;
                for (int k = 2; k <= j; ++k) {
                  current_statement__ = 50;
                  L = (Flambda[(i - 1)] * lambda[(((j - k) + 2) - 1)]);
                  current_statement__ = 51;
                  assign(x,
                    cons_list(index_uni((((j - k) + 2) - 1)),
                      nil_index_list()),
                    ((x[(((j - k) + 2) - 1)] * stan::math::exp(-(rho + L))) +
                      ((rho / (L + rho)) * (1 - stan::math::exp(-(rho + L))))),
                    "assigning variable x");}
              } 
              current_statement__ = 56;
              assign(P1,
                cons_list(index_uni(j),
                  cons_list(index_uni(J),
                    cons_list(index_uni(i), nil_index_list()))),
                x[(age_at_init[(J - 1)] - 1)], "assigning variable P1");}}}
      } 
      current_statement__ = 75;
      for (int J = 1; J <= NAgeGroups; ++J) {
        current_statement__ = 73;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 71;
          for (int j = 1; j <= A; ++j) {
            current_statement__ = 65;
            assign(P,
              cons_list(index_uni(j),
                cons_list(index_uni(J),
                  cons_list(index_uni(i), nil_index_list()))), 0,
              "assigning variable P");
            current_statement__ = 68;
            for (int k = class1[(j - 1)][(J - 1)];
                 k <= class2[(j - 1)][(J - 1)]; ++k) {
              current_statement__ = 66;
              assign(P,
                cons_list(index_uni(j),
                  cons_list(index_uni(J),
                    cons_list(index_uni(i), nil_index_list()))),
                (P1[(k - 1)][(J - 1)][(i - 1)] +
                  P[(j - 1)][(J - 1)][(i - 1)]), "assigning variable P");}
            current_statement__ = 69;
            assign(P,
              cons_list(index_uni(j),
                cons_list(index_uni(J),
                  cons_list(index_uni(i), nil_index_list()))),
              (P[(j - 1)][(J - 1)][(i - 1)] /
                ((class2[(j - 1)][(J - 1)] - class1[(j - 1)][(J - 1)]) + 1)),
              "assigning variable P");}}}
      current_statement__ = 78;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 76;
        assign(Likelihood, cons_list(index_uni(j), nil_index_list()),
          (se -
            (((se + sp) - 1) *
              P[(age[(j - 1)] - 1)][(age_group[(j - 1)] - 1)][(categoryindex[
                                                                (j - 1)] - 1)])),
          "assigning variable Likelihood");}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 6;
          for (int sym3__ = 1; sym3__ <= Ncategory; ++sym3__) {
            current_statement__ = 6;
            current_statement__ = 6;
            check_greater_or_equal(function__, "P1[sym1__, sym2__, sym3__]",
                                   P1[(sym1__ - 1)][(sym2__ - 1)][(sym3__ -
                                                                    1)], 0);}
        }}
      current_statement__ = 6;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 6;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 6;
          for (int sym3__ = 1; sym3__ <= Ncategory; ++sym3__) {
            current_statement__ = 6;
            current_statement__ = 6;
            check_less_or_equal(function__, "P1[sym1__, sym2__, sym3__]",
                                P1[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                                1);}}}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= Ncategory; ++sym3__) {
            current_statement__ = 7;
            current_statement__ = 7;
            check_greater_or_equal(function__, "P[sym1__, sym2__, sym3__]",
                                   P[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                                   0);}}}
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          current_statement__ = 7;
          for (int sym3__ = 1; sym3__ <= Ncategory; ++sym3__) {
            current_statement__ = 7;
            current_statement__ = 7;
            check_less_or_equal(function__, "P[sym1__, sym2__, sym3__]",
                                P[(sym1__ - 1)][(sym2__ - 1)][(sym3__ - 1)],
                                1);}}}
      current_statement__ = 8;
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        current_statement__ = 8;
        current_statement__ = 8;
        check_greater_or_equal(function__, "Flambda[sym1__]",
                               Flambda[(sym1__ - 1)], 0);}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_greater_or_equal(function__, "Likelihood[sym1__]",
                               Likelihood[(sym1__ - 1)], 0);}
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 9;
        current_statement__ = 9;
        check_less_or_equal(function__, "Likelihood[sym1__]",
                            Likelihood[(sym1__ - 1)], 1);}
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
          vars__.emplace_back(x[(sym1__ - 1)]);}
        vars__.emplace_back(L);
        for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
              vars__.emplace_back(
                P1[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
        for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
              vars__.emplace_back(
                P[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);}}}
        for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
          vars__.emplace_back(Flambda[(sym1__ - 1)]);}
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(Likelihood[(sym1__ - 1)]);}
        vars__.emplace_back(c);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      std::vector<double> lambda;
      lambda = std::vector<double>(NGroups, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      assign(lambda, nil_index_list(), context__.vals_r("lambda"),
        "assigning variable lambda");
      std::vector<double> lambda_free__;
      lambda_free__ = std::vector<double>(NGroups, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= NGroups; ++sym1__) {
        current_statement__ = 1;
        assign(lambda_free__, cons_list(index_uni(sym1__), nil_index_list()),
          stan::math::lb_free(lambda[(sym1__ - 1)], 0),
          "assigning variable lambda_free__");}
      double rho;
      rho = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      rho = context__.vals_r("rho")[(1 - 1)];
      double rho_free__;
      rho_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      rho_free__ = stan::math::lub_free(rho, 0, 20);
      std::vector<std::vector<double>> Flambda2;
      Flambda2 = std::vector<std::vector<double>>(maxNcategory, std::vector<double>(Ncategoryclass, std::numeric_limits<double>::quiet_NaN()));
      
      {
        std::vector<local_scalar_t__> Flambda2_flat__;
        current_statement__ = 3;
        assign(Flambda2_flat__, nil_index_list(),
          context__.vals_r("Flambda2"), "assigning variable Flambda2_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
          current_statement__ = 3;
          for (int sym2__ = 1; sym2__ <= maxNcategory; ++sym2__) {
            current_statement__ = 3;
            assign(Flambda2,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              Flambda2_flat__[(pos__ - 1)], "assigning variable Flambda2");
            current_statement__ = 3;
            pos__ = (pos__ + 1);}}
      }
      for (int sym1__ = 1; sym1__ <= NGroups; ++sym1__) {
        vars__.emplace_back(lambda_free__[(sym1__ - 1)]);}
      vars__.emplace_back(rho_free__);
      for (int sym1__ = 1; sym1__ <= maxNcategory; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= Ncategoryclass; ++sym2__) {
          vars__.emplace_back(Flambda2[(sym1__ - 1)][(sym2__ - 1)]);}}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("lambda");
    names__.emplace_back("rho");
    names__.emplace_back("Flambda2");
    names__.emplace_back("x");
    names__.emplace_back("L");
    names__.emplace_back("P1");
    names__.emplace_back("P");
    names__.emplace_back("Flambda");
    names__.emplace_back("Likelihood");
    names__.emplace_back("c");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(NGroups)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(maxNcategory)
                                             ,
                                             static_cast<size_t>(Ncategoryclass)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(A)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(A),
                                             static_cast<size_t>(NAgeGroups),
                                             static_cast<size_t>(Ncategory)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(A),
                                             static_cast<size_t>(NAgeGroups),
                                             static_cast<size_t>(Ncategory)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Ncategory)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= NGroups; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= maxNcategory; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "Flambda2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "L");
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "P1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "P" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Flambda" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Likelihood" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "c");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= NGroups; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "lambda" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= maxNcategory; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "Flambda2" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          }}
      }}
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "x" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "L");
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "P1" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
            {
              for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
                {
                  param_names__.emplace_back(std::string() + "P" + '.' + std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
                }}
            }}
        }}
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Flambda" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Likelihood" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "c");
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" << NGroups << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Flambda2\",\"type\":{\"name\":\"array\",\"length\":" << maxNcategory << ",\"element_type\":{\"name\":\"array\",\"length\":" << Ncategoryclass << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" << A << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"P1\",\"type\":{\"name\":\"array\",\"length\":" << A << ",\"element_type\":{\"name\":\"array\",\"length\":" << NAgeGroups << ",\"element_type\":{\"name\":\"array\",\"length\":" << Ncategory << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"P\",\"type\":{\"name\":\"array\",\"length\":" << A << ",\"element_type\":{\"name\":\"array\",\"length\":" << NAgeGroups << ",\"element_type\":{\"name\":\"array\",\"length\":" << Ncategory << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"Flambda\",\"type\":{\"name\":\"array\",\"length\":" << Ncategory << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Likelihood\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" << NGroups << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Flambda2\",\"type\":{\"name\":\"array\",\"length\":" << maxNcategory << ",\"element_type\":{\"name\":\"array\",\"length\":" << Ncategoryclass << ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" << A << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"P1\",\"type\":{\"name\":\"array\",\"length\":" << A << ",\"element_type\":{\"name\":\"array\",\"length\":" << NAgeGroups << ",\"element_type\":{\"name\":\"array\",\"length\":" << Ncategory << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"P\",\"type\":{\"name\":\"array\",\"length\":" << A << ",\"element_type\":{\"name\":\"array\",\"length\":" << NAgeGroups << ",\"element_type\":{\"name\":\"array\",\"length\":" << Ncategory << ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"Flambda\",\"type\":{\"name\":\"array\",\"length\":" << Ncategory << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Likelihood\",\"type\":{\"name\":\"array\",\"length\":" << N << ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_independent_namespace::model_independent;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_independent_namespace::profiles__;
}
#endif
#endif

/*
    Rsero is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Rsero is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Rsero.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_intervention_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 172> locations_array__ =
  {" (found before start of program)",
  " (in 'intervention', line 31, column 2 to column 13)",
  " (in 'intervention', line 32, column 2 to column 39)",
  " (in 'intervention', line 33, column 2 to column 34)",
  " (in 'intervention', line 34, column 2 to column 46)",
  " (in 'intervention', line 39, column 2 to column 12)",
  " (in 'intervention', line 40, column 2 to column 22)",
  " (in 'intervention', line 41, column 2 to column 34)",
  " (in 'intervention', line 42, column 2 to column 15)",
  " (in 'intervention', line 44, column 2 to column 56)",
  " (in 'intervention', line 45, column 2 to column 55)",
  " (in 'intervention', line 46, column 2 to column 37)",
  " (in 'intervention', line 47, column 2 to column 43)",
  " (in 'intervention', line 48, column 2 to column 9)",
  " (in 'intervention', line 50, column 2 to column 14)",
  " (in 'intervention', line 58, column 6 to column 31)",
  " (in 'intervention', line 57, column 17 to line 59, column 5)",
  " (in 'intervention', line 57, column 4 to line 59, column 5)",
  " (in 'intervention', line 63, column 10 to column 36)",
  " (in 'intervention', line 62, column 40 to line 64, column 9)",
  " (in 'intervention', line 62, column 8 to line 64, column 9)",
  " (in 'intervention', line 66, column 10 to column 36)",
  " (in 'intervention', line 65, column 22 to line 67, column 9)",
  " (in 'intervention', line 65, column 8 to line 67, column 9)",
  " (in 'intervention', line 61, column 21 to line 68, column 7)",
  " (in 'intervention', line 61, column 6 to line 68, column 7)",
  " (in 'intervention', line 60, column 17 to line 69, column 5)",
  " (in 'intervention', line 60, column 4 to line 69, column 5)",
  " (in 'intervention', line 56, column 8 to line 70, column 3)",
  " (in 'intervention', line 54, column 6 to column 32)",
  " (in 'intervention', line 53, column 17 to line 55, column 5)",
  " (in 'intervention', line 53, column 4 to line 55, column 5)",
  " (in 'intervention', line 52, column 10 to line 56, column 3)",
  " (in 'intervention', line 52, column 2 to line 70, column 3)",
  " (in 'intervention', line 72, column 2 to column 6)",
  " (in 'intervention', line 79, column 6 to column 12)",
  " (in 'intervention', line 82, column 8 to column 48)",
  " (in 'intervention', line 81, column 33 to line 83, column 9)",
  " (in 'intervention', line 81, column 8 to line 83, column 9)",
  " (in 'intervention', line 80, column 32 to line 84, column 7)",
  " (in 'intervention', line 80, column 6 to line 84, column 7)",
  " (in 'intervention', line 85, column 6 to column 27)",
  " (in 'intervention', line 78, column 25 to line 86, column 5)",
  " (in 'intervention', line 78, column 4 to line 86, column 5)",
  " (in 'intervention', line 77, column 7 to line 87, column 3)",
  " (in 'intervention', line 75, column 6 to column 21)",
  " (in 'intervention', line 74, column 25 to line 76, column 5)",
  " (in 'intervention', line 74, column 4 to line 76, column 5)",
  " (in 'intervention', line 73, column 17 to line 77, column 3)",
  " (in 'intervention', line 73, column 2 to line 87, column 3)",
  " (in 'intervention', line 89, column 2 to column 6)",
  " (in 'intervention', line 94, column 8 to column 48)",
  " (in 'intervention', line 96, column 10 to column 17)",
  " (in 'intervention', line 100, column 12 to column 65)",
  " (in 'intervention', line 99, column 15 to line 101, column 11)",
  " (in 'intervention', line 98, column 12 to column 54)",
  " (in 'intervention', line 97, column 30 to line 99, column 11)",
  " (in 'intervention', line 97, column 10 to line 101, column 11)",
  " (in 'intervention', line 95, column 23 to line 102, column 9)",
  " (in 'intervention', line 95, column 8 to line 102, column 9)",
  " (in 'intervention', line 103, column 8 to column 15)",
  " (in 'intervention', line 93, column 27 to line 104, column 7)",
  " (in 'intervention', line 93, column 6 to line 104, column 7)",
  " (in 'intervention', line 92, column 26 to line 105, column 5)",
  " (in 'intervention', line 92, column 4 to line 105, column 5)",
  " (in 'intervention', line 91, column 22 to line 106, column 3)",
  " (in 'intervention', line 91, column 2 to line 106, column 3)",
  " (in 'intervention', line 111, column 8 to column 16)",
  " (in 'intervention', line 113, column 10 to column 45)",
  " (in 'intervention', line 112, column 21 to line 114, column 9)",
  " (in 'intervention', line 112, column 8 to line 114, column 9)",
  " (in 'intervention', line 118, column 10 to column 46)",
  " (in 'intervention', line 119, column 10 to column 49)",
  " (in 'intervention', line 122, column 14 to column 41)",
  " (in 'intervention', line 123, column 14 to column 82)",
  " (in 'intervention', line 121, column 25 to line 124, column 13)",
  " (in 'intervention', line 121, column 12 to line 124, column 13)",
  " (in 'intervention', line 120, column 18 to line 125, column 11)",
  " (in 'intervention', line 120, column 10 to line 125, column 11)",
  " (in 'intervention', line 126, column 10 to column 41)",
  " (in 'intervention', line 116, column 21 to line 128, column 9)",
  " (in 'intervention', line 116, column 8 to line 128, column 9)",
  " (in 'intervention', line 110, column 27 to line 129, column 7)",
  " (in 'intervention', line 110, column 6 to line 129, column 7)",
  " (in 'intervention', line 109, column 26 to line 130, column 5)",
  " (in 'intervention', line 109, column 4 to line 130, column 5)",
  " (in 'intervention', line 108, column 22 to line 131, column 3)",
  " (in 'intervention', line 108, column 2 to line 131, column 3)",
  " (in 'intervention', line 136, column 8 to column 19)",
  " (in 'intervention', line 138, column 10 to column 41)",
  " (in 'intervention', line 137, column 41 to line 139, column 9)",
  " (in 'intervention', line 137, column 8 to line 139, column 9)",
  " (in 'intervention', line 140, column 8 to column 56)",
  " (in 'intervention', line 135, column 19 to line 141, column 7)",
  " (in 'intervention', line 135, column 6 to line 141, column 7)",
  " (in 'intervention', line 134, column 25 to line 142, column 5)",
  " (in 'intervention', line 134, column 4 to line 142, column 5)",
  " (in 'intervention', line 133, column 24 to line 143, column 3)",
  " (in 'intervention', line 133, column 2 to line 143, column 3)",
  " (in 'intervention', line 146, column 4 to column 72)",
  " (in 'intervention', line 145, column 15 to line 147, column 3)",
  " (in 'intervention', line 145, column 2 to line 147, column 3)",
  " (in 'intervention', line 154, column 4 to column 43)",
  " (in 'intervention', line 155, column 4 to column 46)",
  " (in 'intervention', line 153, column 16 to line 156, column 3)",
  " (in 'intervention', line 153, column 2 to line 156, column 3)",
  " (in 'intervention', line 160, column 6 to column 38)",
  " (in 'intervention', line 159, column 28 to line 161, column 5)",
  " (in 'intervention', line 159, column 4 to line 161, column 5)",
  " (in 'intervention', line 158, column 28 to line 162, column 3)",
  " (in 'intervention', line 158, column 2 to line 162, column 3)",
  " (in 'intervention', line 164, column 2 to column 31)",
  " (in 'intervention', line 167, column 4 to column 52)",
  " (in 'intervention', line 166, column 15 to line 168, column 3)",
  " (in 'intervention', line 166, column 2 to line 168, column 3)",
  " (in 'intervention', line 2, column 2 to column 18)",
  " (in 'intervention', line 3, column 2 to column 28)",
  " (in 'intervention', line 4, column 23 to column 24)",
  " (in 'intervention', line 4, column 25 to column 35)",
  " (in 'intervention', line 4, column 2 to column 37)",
  " (in 'intervention', line 5, column 23 to column 24)",
  " (in 'intervention', line 5, column 25 to column 35)",
  " (in 'intervention', line 5, column 2 to column 37)",
  " (in 'intervention', line 6, column 2 to column 24)",
  " (in 'intervention', line 7, column 2 to column 18)",
  " (in 'intervention', line 8, column 20 to column 21)",
  " (in 'intervention', line 8, column 2 to column 23)",
  " (in 'intervention', line 9, column 27 to column 28)",
  " (in 'intervention', line 9, column 2 to column 30)",
  " (in 'intervention', line 10, column 2 to column 40)",
  " (in 'intervention', line 11, column 30 to column 31)",
  " (in 'intervention', line 11, column 2 to column 33)",
  " (in 'intervention', line 12, column 2 to column 26)",
  " (in 'intervention', line 13, column 2 to column 31)",
  " (in 'intervention', line 14, column 2 to column 28)",
  " (in 'intervention', line 15, column 30 to column 39)",
  " (in 'intervention', line 15, column 40 to column 54)",
  " (in 'intervention', line 15, column 2 to column 56)",
  " (in 'intervention', line 16, column 32 to column 33)",
  " (in 'intervention', line 16, column 2 to column 35)",
  " (in 'intervention', line 17, column 30 to column 31)",
  " (in 'intervention', line 17, column 2 to column 33)",
  " (in 'intervention', line 18, column 26 to column 27)",
  " (in 'intervention', line 18, column 2 to column 30)",
  " (in 'intervention', line 19, column 28 to column 38)",
  " (in 'intervention', line 19, column 2 to column 40)",
  " (in 'intervention', line 20, column 2 to column 18)",
  " (in 'intervention', line 21, column 27 to column 28)",
  " (in 'intervention', line 21, column 2 to column 30)",
  " (in 'intervention', line 22, column 27 to column 28)",
  " (in 'intervention', line 22, column 2 to column 30)",
  " (in 'intervention', line 23, column 2 to column 27)",
  " (in 'intervention', line 24, column 2 to column 27)",
  " (in 'intervention', line 25, column 2 to column 28)",
  " (in 'intervention', line 26, column 2 to column 31)",
  " (in 'intervention', line 27, column 2 to column 31)",
  " (in 'intervention', line 28, column 2 to column 29)",
  " (in 'intervention', line 31, column 10 to column 11)",
  " (in 'intervention', line 32, column 36 to column 37)",
  " (in 'intervention', line 34, column 17 to column 29)",
  " (in 'intervention', line 34, column 30 to column 44)",
  " (in 'intervention', line 39, column 9 to column 10)",
  " (in 'intervention', line 41, column 31 to column 32)",
  " (in 'intervention', line 42, column 12 to column 13)",
  " (in 'intervention', line 44, column 32 to column 33)",
  " (in 'intervention', line 44, column 34 to column 44)",
  " (in 'intervention', line 44, column 45 to column 54)",
  " (in 'intervention', line 45, column 31 to column 32)",
  " (in 'intervention', line 45, column 33 to column 43)",
  " (in 'intervention', line 45, column 44 to column 53)",
  " (in 'intervention', line 46, column 26 to column 35)",
  " (in 'intervention', line 47, column 40 to column 41)"};
class model_intervention final : public model_base_crtp<model_intervention> {
private:
  int A;
  int NAgeGroups;
  std::vector<std::vector<int>> class1;
  std::vector<std::vector<int>> class2;
  int NGroups;
  int N;
  std::vector<int> age;
  std::vector<int> Y;
  int seroreversion;
  std::vector<int> categoryindex;
  int Ncategory;
  int Ncategoryclass;
  int maxNcategory;
  std::vector<std::vector<int>> MatrixCategory;
  std::vector<int> age_at_sampling;
  std::vector<int> sampling_year;
  std::vector<int> age_group;
  std::vector<int> age_at_init;
  int K;
  std::vector<double> priorT1;
  std::vector<double> priorT2;
  double priorC1;
  double priorC2;
  double priorRho;
  double se;
  double sp;
  int cat_lambda;
public:
  ~model_intervention() {}
  model_intervention(stan::io::var_context& context__, unsigned int
                     random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_intervention_namespace::model_intervention";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 115;
      context__.validate_dims("data initialization", "A", "int",
        std::vector<size_t>{});
      A = std::numeric_limits<int>::min();
      current_statement__ = 115;
      A = context__.vals_i("A")[(1 - 1)];
      current_statement__ = 115;
      stan::math::check_greater_or_equal(function__, "A", A, 0);
      current_statement__ = 116;
      context__.validate_dims("data initialization", "NAgeGroups", "int",
        std::vector<size_t>{});
      NAgeGroups = std::numeric_limits<int>::min();
      current_statement__ = 116;
      NAgeGroups = context__.vals_i("NAgeGroups")[(1 - 1)];
      current_statement__ = 116;
      stan::math::check_greater_or_equal(function__, "NAgeGroups",
        NAgeGroups, 1);
      current_statement__ = 117;
      stan::math::validate_non_negative_index("class1", "A", A);
      current_statement__ = 118;
      stan::math::validate_non_negative_index("class1", "NAgeGroups",
        NAgeGroups);
      current_statement__ = 119;
      context__.validate_dims("data initialization", "class1", "int",
        std::vector<size_t>{static_cast<size_t>(A),
          static_cast<size_t>(NAgeGroups)});
      class1 = std::vector<std::vector<int>>(A,
                 std::vector<int>(NAgeGroups,
                   std::numeric_limits<int>::min()));
      {
        std::vector<int> class1_flat__;
        current_statement__ = 119;
        class1_flat__ = context__.vals_i("class1");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= NAgeGroups; ++sym1__) {
          current_statement__ = 119;
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            current_statement__ = 119;
            stan::model::assign(class1, class1_flat__[(pos__ - 1)],
              "assigning variable class1", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 119;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 119;
      stan::math::check_greater_or_equal(function__, "class1", class1, 1);
      current_statement__ = 120;
      stan::math::validate_non_negative_index("class2", "A", A);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("class2", "NAgeGroups",
        NAgeGroups);
      current_statement__ = 122;
      context__.validate_dims("data initialization", "class2", "int",
        std::vector<size_t>{static_cast<size_t>(A),
          static_cast<size_t>(NAgeGroups)});
      class2 = std::vector<std::vector<int>>(A,
                 std::vector<int>(NAgeGroups,
                   std::numeric_limits<int>::min()));
      {
        std::vector<int> class2_flat__;
        current_statement__ = 122;
        class2_flat__ = context__.vals_i("class2");
        current_statement__ = 122;
        pos__ = 1;
        current_statement__ = 122;
        for (int sym1__ = 1; sym1__ <= NAgeGroups; ++sym1__) {
          current_statement__ = 122;
          for (int sym2__ = 1; sym2__ <= A; ++sym2__) {
            current_statement__ = 122;
            stan::model::assign(class2, class2_flat__[(pos__ - 1)],
              "assigning variable class2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 122;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 122;
      stan::math::check_greater_or_equal(function__, "class2", class2, 1);
      current_statement__ = 123;
      context__.validate_dims("data initialization", "NGroups", "int",
        std::vector<size_t>{});
      NGroups = std::numeric_limits<int>::min();
      current_statement__ = 123;
      NGroups = context__.vals_i("NGroups")[(1 - 1)];
      current_statement__ = 123;
      stan::math::check_greater_or_equal(function__, "NGroups", NGroups, 0);
      current_statement__ = 124;
      context__.validate_dims("data initialization", "N", "int",
        std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      current_statement__ = 124;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 124;
      stan::math::check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 125;
      stan::math::validate_non_negative_index("age", "N", N);
      current_statement__ = 126;
      context__.validate_dims("data initialization", "age", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      age = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 126;
      age = context__.vals_i("age");
      current_statement__ = 126;
      stan::math::check_greater_or_equal(function__, "age", age, 0);
      current_statement__ = 127;
      stan::math::validate_non_negative_index("Y", "N", N);
      current_statement__ = 128;
      context__.validate_dims("data initialization", "Y", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      Y = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 128;
      Y = context__.vals_i("Y");
      current_statement__ = 128;
      stan::math::check_greater_or_equal(function__, "Y", Y, 0);
      current_statement__ = 128;
      stan::math::check_less_or_equal(function__, "Y", Y, 1);
      current_statement__ = 129;
      context__.validate_dims("data initialization", "seroreversion", "int",
        std::vector<size_t>{});
      seroreversion = std::numeric_limits<int>::min();
      current_statement__ = 129;
      seroreversion = context__.vals_i("seroreversion")[(1 - 1)];
      current_statement__ = 129;
      stan::math::check_greater_or_equal(function__, "seroreversion",
        seroreversion, 0);
      current_statement__ = 129;
      stan::math::check_less_or_equal(function__, "seroreversion",
        seroreversion, 1);
      current_statement__ = 130;
      stan::math::validate_non_negative_index("categoryindex", "N", N);
      current_statement__ = 131;
      context__.validate_dims("data initialization", "categoryindex", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      categoryindex = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 131;
      categoryindex = context__.vals_i("categoryindex");
      current_statement__ = 131;
      stan::math::check_greater_or_equal(function__, "categoryindex",
        categoryindex, 1);
      current_statement__ = 132;
      context__.validate_dims("data initialization", "Ncategory", "int",
        std::vector<size_t>{});
      Ncategory = std::numeric_limits<int>::min();
      current_statement__ = 132;
      Ncategory = context__.vals_i("Ncategory")[(1 - 1)];
      current_statement__ = 132;
      stan::math::check_greater_or_equal(function__, "Ncategory", Ncategory,
        1);
      current_statement__ = 133;
      context__.validate_dims("data initialization", "Ncategoryclass", "int",
        std::vector<size_t>{});
      Ncategoryclass = std::numeric_limits<int>::min();
      current_statement__ = 133;
      Ncategoryclass = context__.vals_i("Ncategoryclass")[(1 - 1)];
      current_statement__ = 133;
      stan::math::check_greater_or_equal(function__, "Ncategoryclass",
        Ncategoryclass, 1);
      current_statement__ = 134;
      context__.validate_dims("data initialization", "maxNcategory", "int",
        std::vector<size_t>{});
      maxNcategory = std::numeric_limits<int>::min();
      current_statement__ = 134;
      maxNcategory = context__.vals_i("maxNcategory")[(1 - 1)];
      current_statement__ = 134;
      stan::math::check_greater_or_equal(function__, "maxNcategory",
        maxNcategory, 1);
      current_statement__ = 135;
      stan::math::validate_non_negative_index("MatrixCategory", "Ncategory",
        Ncategory);
      current_statement__ = 136;
      stan::math::validate_non_negative_index("MatrixCategory",
        "Ncategoryclass", Ncategoryclass);
      current_statement__ = 137;
      context__.validate_dims("data initialization", "MatrixCategory", "int",
        std::vector<size_t>{static_cast<size_t>(Ncategory),
          static_cast<size_t>(Ncategoryclass)});
      MatrixCategory = std::vector<std::vector<int>>(Ncategory,
                         std::vector<int>(Ncategoryclass,
                           std::numeric_limits<int>::min()));
      {
        std::vector<int> MatrixCategory_flat__;
        current_statement__ = 137;
        MatrixCategory_flat__ = context__.vals_i("MatrixCategory");
        current_statement__ = 137;
        pos__ = 1;
        current_statement__ = 137;
        for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
          current_statement__ = 137;
          for (int sym2__ = 1; sym2__ <= Ncategory; ++sym2__) {
            current_statement__ = 137;
            stan::model::assign(MatrixCategory, MatrixCategory_flat__[(pos__
              - 1)], "assigning variable MatrixCategory",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 137;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 137;
      stan::math::check_greater_or_equal(function__, "MatrixCategory",
        MatrixCategory, 1);
      current_statement__ = 138;
      stan::math::validate_non_negative_index("age_at_sampling", "N", N);
      current_statement__ = 139;
      context__.validate_dims("data initialization", "age_at_sampling",
        "int", std::vector<size_t>{static_cast<size_t>(N)});
      age_at_sampling = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 139;
      age_at_sampling = context__.vals_i("age_at_sampling");
      current_statement__ = 139;
      stan::math::check_greater_or_equal(function__, "age_at_sampling",
        age_at_sampling, 0);
      current_statement__ = 140;
      stan::math::validate_non_negative_index("sampling_year", "N", N);
      current_statement__ = 141;
      context__.validate_dims("data initialization", "sampling_year", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      sampling_year = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 141;
      sampling_year = context__.vals_i("sampling_year");
      current_statement__ = 141;
      stan::math::check_greater_or_equal(function__, "sampling_year",
        sampling_year, 0);
      current_statement__ = 142;
      stan::math::validate_non_negative_index("age_group", "N", N);
      current_statement__ = 143;
      context__.validate_dims("data initialization", "age_group", "int",
        std::vector<size_t>{static_cast<size_t>(N)});
      age_group = std::vector<int>(N, std::numeric_limits<int>::min());
      current_statement__ = 143;
      age_group = context__.vals_i("age_group");
      current_statement__ = 143;
      stan::math::check_greater_or_equal(function__, "age_group", age_group,
        1);
      current_statement__ = 144;
      stan::math::validate_non_negative_index("age_at_init", "NAgeGroups",
        NAgeGroups);
      current_statement__ = 145;
      context__.validate_dims("data initialization", "age_at_init", "int",
        std::vector<size_t>{static_cast<size_t>(NAgeGroups)});
      age_at_init = std::vector<int>(NAgeGroups,
                      std::numeric_limits<int>::min());
      current_statement__ = 145;
      age_at_init = context__.vals_i("age_at_init");
      current_statement__ = 145;
      stan::math::check_greater_or_equal(function__, "age_at_init",
        age_at_init, 1);
      current_statement__ = 146;
      context__.validate_dims("data initialization", "K", "int",
        std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      current_statement__ = 146;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 146;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("priorT1", "K", K);
      current_statement__ = 148;
      context__.validate_dims("data initialization", "priorT1", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      priorT1 = std::vector<double>(K,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 148;
      priorT1 = context__.vals_r("priorT1");
      current_statement__ = 148;
      stan::math::check_greater_or_equal(function__, "priorT1", priorT1, 0);
      current_statement__ = 149;
      stan::math::validate_non_negative_index("priorT2", "K", K);
      current_statement__ = 150;
      context__.validate_dims("data initialization", "priorT2", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      priorT2 = std::vector<double>(K,
                  std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 150;
      priorT2 = context__.vals_r("priorT2");
      current_statement__ = 150;
      stan::math::check_greater_or_equal(function__, "priorT2", priorT2, 0);
      current_statement__ = 151;
      context__.validate_dims("data initialization", "priorC1", "double",
        std::vector<size_t>{});
      priorC1 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 151;
      priorC1 = context__.vals_r("priorC1")[(1 - 1)];
      current_statement__ = 151;
      stan::math::check_greater_or_equal(function__, "priorC1", priorC1, 0);
      current_statement__ = 152;
      context__.validate_dims("data initialization", "priorC2", "double",
        std::vector<size_t>{});
      priorC2 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 152;
      priorC2 = context__.vals_r("priorC2")[(1 - 1)];
      current_statement__ = 152;
      stan::math::check_greater_or_equal(function__, "priorC2", priorC2, 0);
      current_statement__ = 153;
      context__.validate_dims("data initialization", "priorRho", "double",
        std::vector<size_t>{});
      priorRho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 153;
      priorRho = context__.vals_r("priorRho")[(1 - 1)];
      current_statement__ = 153;
      stan::math::check_greater_or_equal(function__, "priorRho", priorRho, 0);
      current_statement__ = 154;
      context__.validate_dims("data initialization", "se", "double",
        std::vector<size_t>{});
      se = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 154;
      se = context__.vals_r("se")[(1 - 1)];
      current_statement__ = 154;
      stan::math::check_greater_or_equal(function__, "se", se, 0);
      current_statement__ = 154;
      stan::math::check_less_or_equal(function__, "se", se, 1);
      current_statement__ = 155;
      context__.validate_dims("data initialization", "sp", "double",
        std::vector<size_t>{});
      sp = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 155;
      sp = context__.vals_r("sp")[(1 - 1)];
      current_statement__ = 155;
      stan::math::check_greater_or_equal(function__, "sp", sp, 0);
      current_statement__ = 155;
      stan::math::check_less_or_equal(function__, "sp", sp, 1);
      current_statement__ = 156;
      context__.validate_dims("data initialization", "cat_lambda", "int",
        std::vector<size_t>{});
      cat_lambda = std::numeric_limits<int>::min();
      current_statement__ = 156;
      cat_lambda = context__.vals_i("cat_lambda")[(1 - 1)];
      current_statement__ = 156;
      stan::math::check_greater_or_equal(function__, "cat_lambda",
        cat_lambda, 0);
      current_statement__ = 157;
      stan::math::validate_non_negative_index("T", "K", K);
      current_statement__ = 158;
      stan::math::validate_non_negative_index("annual_foi", "K", K);
      current_statement__ = 159;
      stan::math::validate_non_negative_index("Flambda2", "maxNcategory",
        maxNcategory);
      current_statement__ = 160;
      stan::math::validate_non_negative_index("Flambda2", "Ncategoryclass",
        Ncategoryclass);
      current_statement__ = 161;
      stan::math::validate_non_negative_index("x", "A", A);
      current_statement__ = 162;
      stan::math::validate_non_negative_index("lambda", "A", A);
      current_statement__ = 163;
      stan::math::validate_non_negative_index("Time", "K", K);
      current_statement__ = 164;
      stan::math::validate_non_negative_index("P1", "A", A);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("P1", "NAgeGroups", NAgeGroups);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("P1", "Ncategory", Ncategory);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("P", "A", A);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("P", "NAgeGroups", NAgeGroups);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("P", "Ncategory", Ncategory);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("Flambda", "Ncategory",
        Ncategory);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("Likelihood", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = K + K + 1 + (maxNcategory * Ncategoryclass);
  }
  inline std::string model_name() const final {
    return "model_intervention";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_intervention_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<local_scalar_t__> T =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 1;
      T = in__.template read<std::vector<local_scalar_t__>>(K);
      std::vector<local_scalar_t__> annual_foi =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 2;
      annual_foi = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0.00001,
                     lp__, K);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 3;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              20, lp__);
      std::vector<std::vector<local_scalar_t__>> Flambda2 =
        std::vector<std::vector<local_scalar_t__>>(maxNcategory,
          std::vector<local_scalar_t__>(Ncategoryclass, DUMMY_VAR__));
      current_statement__ = 4;
      Flambda2 = in__.template read<
                   std::vector<std::vector<local_scalar_t__>>>(maxNcategory,
                   Ncategoryclass);
      std::vector<local_scalar_t__> x =
        std::vector<local_scalar_t__>(A, DUMMY_VAR__);
      local_scalar_t__ L = DUMMY_VAR__;
      std::vector<local_scalar_t__> lambda =
        std::vector<local_scalar_t__>(A, DUMMY_VAR__);
      std::vector<local_scalar_t__> Time =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      std::vector<std::vector<std::vector<local_scalar_t__>>> P1 =
        std::vector<std::vector<std::vector<local_scalar_t__>>>(A,
          std::vector<std::vector<local_scalar_t__>>(NAgeGroups,
            std::vector<local_scalar_t__>(Ncategory, DUMMY_VAR__)));
      std::vector<std::vector<std::vector<local_scalar_t__>>> P =
        std::vector<std::vector<std::vector<local_scalar_t__>>>(A,
          std::vector<std::vector<local_scalar_t__>>(NAgeGroups,
            std::vector<local_scalar_t__>(Ncategory, DUMMY_VAR__)));
      std::vector<local_scalar_t__> Flambda =
        std::vector<local_scalar_t__>(Ncategory, DUMMY_VAR__);
      std::vector<local_scalar_t__> Likelihood =
        std::vector<local_scalar_t__>(N, DUMMY_VAR__);
      local_scalar_t__ c = DUMMY_VAR__;
      current_statement__ = 14;
      stan::model::assign(Time, 1, "assigning variable Time",
        stan::model::index_uni(1));
      current_statement__ = 33;
      if (stan::math::logical_eq(K, 1)) {
        current_statement__ = 31;
        for (int j = 1; j <= A; ++j) {
          current_statement__ = 29;
          stan::model::assign(lambda,
            stan::model::rvalue(annual_foi, "annual_foi",
              stan::model::index_uni(K)), "assigning variable lambda",
            stan::model::index_uni(j));
        }
      } else {
        current_statement__ = 17;
        for (int i = 2; i <= K; ++i) {
          current_statement__ = 15;
          stan::model::assign(Time,
            (stan::model::rvalue(Time, "Time",
               stan::model::index_uni((i - 1))) +
            stan::model::rvalue(T, "T", stan::model::index_uni(i))),
            "assigning variable Time", stan::model::index_uni(i));
        }
        current_statement__ = 27;
        for (int j = 1; j <= A; ++j) {
          current_statement__ = 25;
          for (int i = 1; i <= (K - 1); ++i) {
            current_statement__ = 20;
            if ((stan::math::primitive_value(
                   stan::math::logical_gte(j,
                     stan::model::rvalue(Time, "Time",
                       stan::model::index_uni(i))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_lt(j,
                    stan::model::rvalue(Time, "Time",
                      stan::model::index_uni((i + 1))))))) {
              current_statement__ = 18;
              stan::model::assign(lambda,
                stan::model::rvalue(annual_foi, "annual_foi",
                  stan::model::index_uni(i)), "assigning variable lambda",
                stan::model::index_uni(j));
            }
            current_statement__ = 23;
            if (stan::math::logical_gte(j,
                  stan::model::rvalue(Time, "Time", stan::model::index_uni(K)))) {
              current_statement__ = 21;
              stan::model::assign(lambda,
                stan::model::rvalue(annual_foi, "annual_foi",
                  stan::model::index_uni(K)), "assigning variable lambda",
                stan::model::index_uni(j));
            }
          }
        }
      }
      current_statement__ = 34;
      c = 0;
      current_statement__ = 49;
      if (stan::math::logical_negation(cat_lambda)) {
        current_statement__ = 47;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 45;
          stan::model::assign(Flambda, 1, "assigning variable Flambda",
            stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 43;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 35;
          c = 0;
          current_statement__ = 40;
          for (int I = 1; I <= Ncategoryclass; ++I) {
            current_statement__ = 38;
            if (stan::math::logical_gt(
                  stan::model::rvalue(MatrixCategory, "MatrixCategory",
                    stan::model::index_uni(i), stan::model::index_uni(I)), 1)) {
              current_statement__ = 36;
              c = (c +
                stan::model::rvalue(Flambda2, "Flambda2",
                  stan::model::index_uni(
                    stan::model::rvalue(MatrixCategory, "MatrixCategory",
                      stan::model::index_uni(i), stan::model::index_uni(I))),
                  stan::model::index_uni(I)));
            }
          }
          current_statement__ = 41;
          stan::model::assign(Flambda, stan::math::exp(c),
            "assigning variable Flambda", stan::model::index_uni(i));
        }
      }
      current_statement__ = 50;
      L = 1;
      current_statement__ = 66;
      if (stan::math::logical_eq(seroreversion, 0)) {
        current_statement__ = 64;
        for (int J = 1; J <= NAgeGroups; ++J) {
          current_statement__ = 62;
          for (int i = 1; i <= Ncategory; ++i) {
            current_statement__ = 51;
            stan::model::assign(P1,
              stan::math::exp(
                (-stan::model::rvalue(Flambda, "Flambda",
                    stan::model::index_uni(i)) *
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_uni(1)))), "assigning variable P1",
              stan::model::index_uni(1), stan::model::index_uni(J),
              stan::model::index_uni(i));
            current_statement__ = 59;
            for (int j = 1; j <= (A - 1); ++j) {
              current_statement__ = 52;
              stan::model::assign(x, 1, "assigning variable x",
                stan::model::index_uni(j));
              current_statement__ = 57;
              if (stan::math::logical_lt(j,
                    stan::model::rvalue(age_at_init, "age_at_init",
                      stan::model::index_uni(J)))) {
                current_statement__ = 55;
                stan::model::assign(P1,
                  stan::math::exp(
                    (-stan::model::rvalue(Flambda, "Flambda",
                        stan::model::index_uni(i)) *
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni(j)))), "assigning variable P1",
                  stan::model::index_uni((j + 1)), stan::model::index_uni(J),
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 53;
                stan::model::assign(P1,
                  (stan::model::rvalue(P1, "P1", stan::model::index_uni(j),
                     stan::model::index_uni(J), stan::model::index_uni(i)) *
                  stan::math::exp(
                    (-stan::model::rvalue(Flambda, "Flambda",
                        stan::model::index_uni(i)) *
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni((j + 1)))))),
                  "assigning variable P1", stan::model::index_uni((j + 1)),
                  stan::model::index_uni(J), stan::model::index_uni(i));
              }
            }
            current_statement__ = 60;
            stan::model::assign(x, 1, "assigning variable x",
              stan::model::index_uni(A));
          }
        }
      }
      current_statement__ = 87;
      if (stan::math::logical_eq(seroreversion, 1)) {
        current_statement__ = 85;
        for (int J = 1; J <= NAgeGroups; ++J) {
          current_statement__ = 83;
          for (int i = 1; i <= Ncategory; ++i) {
            current_statement__ = 67;
            stan::model::assign(x, 1, "assigning variable x",
              stan::model::index_uni(A));
            current_statement__ = 70;
            for (int j = 1; j <= A; ++j) {
              current_statement__ = 68;
              stan::model::assign(x,
                stan::math::exp(
                  (-stan::model::rvalue(Flambda, "Flambda",
                      stan::model::index_uni(i)) *
                  stan::model::rvalue(lambda, "lambda",
                    stan::model::index_uni(1)))), "assigning variable x",
                stan::model::index_uni(j));
            }
            current_statement__ = 81;
            for (int j = 1; j <= A; ++j) {
              current_statement__ = 71;
              L = (stan::model::rvalue(Flambda, "Flambda",
                     stan::model::index_uni(i))
                *
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_uni(
                    stan::model::rvalue(age_at_init, "age_at_init",
                      stan::model::index_uni(J)))));
              current_statement__ = 72;
              stan::model::assign(x, ((rho / (L + rho)) + ((L / (L + rho)) *
                stan::math::exp(-L))), "assigning variable x",
                stan::model::index_uni(j));
              current_statement__ = 78;
              if (stan::math::logical_gt(j, 1)) {
                current_statement__ = 76;
                for (int k = 2; k <= j; ++k) {
                  current_statement__ = 73;
                  L = (stan::model::rvalue(Flambda, "Flambda",
                         stan::model::index_uni(i))
                    *
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni(((j - k) + 2))));
                  current_statement__ = 74;
                  stan::model::assign(x,
                    ((stan::model::rvalue(x, "x",
                        stan::model::index_uni(((j - k) + 2))) *
                    stan::math::exp(-(rho + L))) + ((rho / (L + rho)) * (1 -
                    stan::math::exp(-(rho + L))))), "assigning variable x",
                    stan::model::index_uni((((j - k) + 2) - 1)));
                }
              }
              current_statement__ = 79;
              stan::model::assign(P1,
                stan::model::rvalue(x, "x",
                  stan::model::index_uni(
                    stan::model::rvalue(age_at_init, "age_at_init",
                      stan::model::index_uni(J)))), "assigning variable P1",
                stan::model::index_uni(j), stan::model::index_uni(J),
                stan::model::index_uni(i));
            }
          }
        }
      }
      current_statement__ = 98;
      for (int J = 1; J <= NAgeGroups; ++J) {
        current_statement__ = 96;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 94;
          for (int j = 1; j <= A; ++j) {
            current_statement__ = 88;
            stan::model::assign(P, 0, "assigning variable P",
              stan::model::index_uni(j), stan::model::index_uni(J),
              stan::model::index_uni(i));
            current_statement__ = 91;
            for (int k =
                   stan::model::rvalue(class1, "class1",
                     stan::model::index_uni(j), stan::model::index_uni(J)); k
                 <=
                 stan::model::rvalue(class2, "class2",
                   stan::model::index_uni(j), stan::model::index_uni(J)); ++k) {
              current_statement__ = 89;
              stan::model::assign(P,
                (stan::model::rvalue(P1, "P1", stan::model::index_uni(k),
                   stan::model::index_uni(J), stan::model::index_uni(i)) +
                stan::model::rvalue(P, "P", stan::model::index_uni(j),
                  stan::model::index_uni(J), stan::model::index_uni(i))),
                "assigning variable P", stan::model::index_uni(j),
                stan::model::index_uni(J), stan::model::index_uni(i));
            }
            current_statement__ = 92;
            stan::model::assign(P,
              (stan::model::rvalue(P, "P", stan::model::index_uni(j),
                 stan::model::index_uni(J), stan::model::index_uni(i)) /
              ((stan::model::rvalue(class2, "class2",
                  stan::model::index_uni(j), stan::model::index_uni(J)) -
              stan::model::rvalue(class1, "class1",
                stan::model::index_uni(j), stan::model::index_uni(J))) + 1)),
              "assigning variable P", stan::model::index_uni(j),
              stan::model::index_uni(J), stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 101;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 99;
        stan::model::assign(Likelihood, (se - (((se + sp) - 1) *
          stan::model::rvalue(P, "P",
            stan::model::index_uni(
              stan::model::rvalue(age, "age", stan::model::index_uni(j))),
            stan::model::index_uni(
              stan::model::rvalue(age_group, "age_group",
                stan::model::index_uni(j))),
            stan::model::index_uni(
              stan::model::rvalue(categoryindex, "categoryindex",
                stan::model::index_uni(j)))))),
          "assigning variable Likelihood", stan::model::index_uni(j));
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "L", L, 0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "lambda", lambda,
        0.00001);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "P1", P1, 0);
      current_statement__ = 9;
      stan::math::check_less_or_equal(function__, "P1", P1, 1);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "P", P, 0);
      current_statement__ = 10;
      stan::math::check_less_or_equal(function__, "P", P, 1);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "Flambda", Flambda, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "Likelihood",
        Likelihood, 0);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "Likelihood", Likelihood, 1);
      {
        current_statement__ = 105;
        for (int i = 1; i <= K; ++i) {
          current_statement__ = 102;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(T, "T",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorT1, "priorT1",
                             stan::model::index_uni(i)),
                           stan::model::rvalue(priorT2, "priorT2",
                             stan::model::index_uni(i))));
          current_statement__ = 103;
          lp_accum__.add(stan::math::uniform_lpdf<propto__>(
                           stan::model::rvalue(annual_foi, "annual_foi",
                             stan::model::index_uni(i)), priorC1, priorC2));
        }
        current_statement__ = 110;
        for (int I = 1; I <= Ncategoryclass; ++I) {
          current_statement__ = 108;
          for (int i = 1; i <= maxNcategory; ++i) {
            current_statement__ = 106;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(Flambda2, "Flambda2",
                               stan::model::index_uni(i),
                               stan::model::index_uni(I)), 0, 1.73));
          }
        }
        current_statement__ = 111;
        lp_accum__.add(stan::math::exponential_lpdf<propto__>(rho, priorRho));
        current_statement__ = 114;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 112;
          lp_accum__.add(stan::math::bernoulli_lpmf<false>(
                           stan::model::rvalue(Y, "Y",
                             stan::model::index_uni(j)),
                           stan::model::rvalue(Likelihood, "Likelihood",
                             stan::model::index_uni(j))));
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_intervention_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      std::vector<double> T =
        std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      T = in__.template read<std::vector<local_scalar_t__>>(K);
      std::vector<double> annual_foi =
        std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      annual_foi = in__.template read_constrain_lb<
                     std::vector<local_scalar_t__>, jacobian__>(0.00001,
                     lp__, K);
      double rho = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      rho = in__.template read_constrain_lub<local_scalar_t__, jacobian__>(0,
              20, lp__);
      std::vector<std::vector<double>> Flambda2 =
        std::vector<std::vector<double>>(maxNcategory,
          std::vector<double>(Ncategoryclass,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 4;
      Flambda2 = in__.template read<
                   std::vector<std::vector<local_scalar_t__>>>(maxNcategory,
                   Ncategoryclass);
      std::vector<double> x =
        std::vector<double>(A, std::numeric_limits<double>::quiet_NaN());
      double L = std::numeric_limits<double>::quiet_NaN();
      std::vector<double> lambda =
        std::vector<double>(A, std::numeric_limits<double>::quiet_NaN());
      std::vector<double> Time =
        std::vector<double>(K, std::numeric_limits<double>::quiet_NaN());
      std::vector<std::vector<std::vector<double>>> P1 =
        std::vector<std::vector<std::vector<double>>>(A,
          std::vector<std::vector<double>>(NAgeGroups,
            std::vector<double>(Ncategory,
              std::numeric_limits<double>::quiet_NaN())));
      std::vector<std::vector<std::vector<double>>> P =
        std::vector<std::vector<std::vector<double>>>(A,
          std::vector<std::vector<double>>(NAgeGroups,
            std::vector<double>(Ncategory,
              std::numeric_limits<double>::quiet_NaN())));
      std::vector<double> Flambda =
        std::vector<double>(Ncategory,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<double> Likelihood =
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      double c = std::numeric_limits<double>::quiet_NaN();
      out__.write(T);
      out__.write(annual_foi);
      out__.write(rho);
      for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= maxNcategory; ++sym2__) {
          out__.write(Flambda2[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      current_statement__ = 14;
      stan::model::assign(Time, 1, "assigning variable Time",
        stan::model::index_uni(1));
      current_statement__ = 33;
      if (stan::math::logical_eq(K, 1)) {
        current_statement__ = 31;
        for (int j = 1; j <= A; ++j) {
          current_statement__ = 29;
          stan::model::assign(lambda,
            stan::model::rvalue(annual_foi, "annual_foi",
              stan::model::index_uni(K)), "assigning variable lambda",
            stan::model::index_uni(j));
        }
      } else {
        current_statement__ = 17;
        for (int i = 2; i <= K; ++i) {
          current_statement__ = 15;
          stan::model::assign(Time,
            (stan::model::rvalue(Time, "Time",
               stan::model::index_uni((i - 1))) +
            stan::model::rvalue(T, "T", stan::model::index_uni(i))),
            "assigning variable Time", stan::model::index_uni(i));
        }
        current_statement__ = 27;
        for (int j = 1; j <= A; ++j) {
          current_statement__ = 25;
          for (int i = 1; i <= (K - 1); ++i) {
            current_statement__ = 20;
            if ((stan::math::primitive_value(
                   stan::math::logical_gte(j,
                     stan::model::rvalue(Time, "Time",
                       stan::model::index_uni(i))))
                &&
                stan::math::primitive_value(
                  stan::math::logical_lt(j,
                    stan::model::rvalue(Time, "Time",
                      stan::model::index_uni((i + 1))))))) {
              current_statement__ = 18;
              stan::model::assign(lambda,
                stan::model::rvalue(annual_foi, "annual_foi",
                  stan::model::index_uni(i)), "assigning variable lambda",
                stan::model::index_uni(j));
            }
            current_statement__ = 23;
            if (stan::math::logical_gte(j,
                  stan::model::rvalue(Time, "Time", stan::model::index_uni(K)))) {
              current_statement__ = 21;
              stan::model::assign(lambda,
                stan::model::rvalue(annual_foi, "annual_foi",
                  stan::model::index_uni(K)), "assigning variable lambda",
                stan::model::index_uni(j));
            }
          }
        }
      }
      current_statement__ = 34;
      c = 0;
      current_statement__ = 49;
      if (stan::math::logical_negation(cat_lambda)) {
        current_statement__ = 47;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 45;
          stan::model::assign(Flambda, 1, "assigning variable Flambda",
            stan::model::index_uni(i));
        }
      } else {
        current_statement__ = 43;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 35;
          c = 0;
          current_statement__ = 40;
          for (int I = 1; I <= Ncategoryclass; ++I) {
            current_statement__ = 38;
            if (stan::math::logical_gt(
                  stan::model::rvalue(MatrixCategory, "MatrixCategory",
                    stan::model::index_uni(i), stan::model::index_uni(I)), 1)) {
              current_statement__ = 36;
              c = (c +
                stan::model::rvalue(Flambda2, "Flambda2",
                  stan::model::index_uni(
                    stan::model::rvalue(MatrixCategory, "MatrixCategory",
                      stan::model::index_uni(i), stan::model::index_uni(I))),
                  stan::model::index_uni(I)));
            }
          }
          current_statement__ = 41;
          stan::model::assign(Flambda, stan::math::exp(c),
            "assigning variable Flambda", stan::model::index_uni(i));
        }
      }
      current_statement__ = 50;
      L = 1;
      current_statement__ = 66;
      if (stan::math::logical_eq(seroreversion, 0)) {
        current_statement__ = 64;
        for (int J = 1; J <= NAgeGroups; ++J) {
          current_statement__ = 62;
          for (int i = 1; i <= Ncategory; ++i) {
            current_statement__ = 51;
            stan::model::assign(P1,
              stan::math::exp(
                (-stan::model::rvalue(Flambda, "Flambda",
                    stan::model::index_uni(i)) *
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_uni(1)))), "assigning variable P1",
              stan::model::index_uni(1), stan::model::index_uni(J),
              stan::model::index_uni(i));
            current_statement__ = 59;
            for (int j = 1; j <= (A - 1); ++j) {
              current_statement__ = 52;
              stan::model::assign(x, 1, "assigning variable x",
                stan::model::index_uni(j));
              current_statement__ = 57;
              if (stan::math::logical_lt(j,
                    stan::model::rvalue(age_at_init, "age_at_init",
                      stan::model::index_uni(J)))) {
                current_statement__ = 55;
                stan::model::assign(P1,
                  stan::math::exp(
                    (-stan::model::rvalue(Flambda, "Flambda",
                        stan::model::index_uni(i)) *
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni(j)))), "assigning variable P1",
                  stan::model::index_uni((j + 1)), stan::model::index_uni(J),
                  stan::model::index_uni(i));
              } else {
                current_statement__ = 53;
                stan::model::assign(P1,
                  (stan::model::rvalue(P1, "P1", stan::model::index_uni(j),
                     stan::model::index_uni(J), stan::model::index_uni(i)) *
                  stan::math::exp(
                    (-stan::model::rvalue(Flambda, "Flambda",
                        stan::model::index_uni(i)) *
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni((j + 1)))))),
                  "assigning variable P1", stan::model::index_uni((j + 1)),
                  stan::model::index_uni(J), stan::model::index_uni(i));
              }
            }
            current_statement__ = 60;
            stan::model::assign(x, 1, "assigning variable x",
              stan::model::index_uni(A));
          }
        }
      }
      current_statement__ = 87;
      if (stan::math::logical_eq(seroreversion, 1)) {
        current_statement__ = 85;
        for (int J = 1; J <= NAgeGroups; ++J) {
          current_statement__ = 83;
          for (int i = 1; i <= Ncategory; ++i) {
            current_statement__ = 67;
            stan::model::assign(x, 1, "assigning variable x",
              stan::model::index_uni(A));
            current_statement__ = 70;
            for (int j = 1; j <= A; ++j) {
              current_statement__ = 68;
              stan::model::assign(x,
                stan::math::exp(
                  (-stan::model::rvalue(Flambda, "Flambda",
                      stan::model::index_uni(i)) *
                  stan::model::rvalue(lambda, "lambda",
                    stan::model::index_uni(1)))), "assigning variable x",
                stan::model::index_uni(j));
            }
            current_statement__ = 81;
            for (int j = 1; j <= A; ++j) {
              current_statement__ = 71;
              L = (stan::model::rvalue(Flambda, "Flambda",
                     stan::model::index_uni(i))
                *
                stan::model::rvalue(lambda, "lambda",
                  stan::model::index_uni(
                    stan::model::rvalue(age_at_init, "age_at_init",
                      stan::model::index_uni(J)))));
              current_statement__ = 72;
              stan::model::assign(x, ((rho / (L + rho)) + ((L / (L + rho)) *
                stan::math::exp(-L))), "assigning variable x",
                stan::model::index_uni(j));
              current_statement__ = 78;
              if (stan::math::logical_gt(j, 1)) {
                current_statement__ = 76;
                for (int k = 2; k <= j; ++k) {
                  current_statement__ = 73;
                  L = (stan::model::rvalue(Flambda, "Flambda",
                         stan::model::index_uni(i))
                    *
                    stan::model::rvalue(lambda, "lambda",
                      stan::model::index_uni(((j - k) + 2))));
                  current_statement__ = 74;
                  stan::model::assign(x,
                    ((stan::model::rvalue(x, "x",
                        stan::model::index_uni(((j - k) + 2))) *
                    stan::math::exp(-(rho + L))) + ((rho / (L + rho)) * (1 -
                    stan::math::exp(-(rho + L))))), "assigning variable x",
                    stan::model::index_uni((((j - k) + 2) - 1)));
                }
              }
              current_statement__ = 79;
              stan::model::assign(P1,
                stan::model::rvalue(x, "x",
                  stan::model::index_uni(
                    stan::model::rvalue(age_at_init, "age_at_init",
                      stan::model::index_uni(J)))), "assigning variable P1",
                stan::model::index_uni(j), stan::model::index_uni(J),
                stan::model::index_uni(i));
            }
          }
        }
      }
      current_statement__ = 98;
      for (int J = 1; J <= NAgeGroups; ++J) {
        current_statement__ = 96;
        for (int i = 1; i <= Ncategory; ++i) {
          current_statement__ = 94;
          for (int j = 1; j <= A; ++j) {
            current_statement__ = 88;
            stan::model::assign(P, 0, "assigning variable P",
              stan::model::index_uni(j), stan::model::index_uni(J),
              stan::model::index_uni(i));
            current_statement__ = 91;
            for (int k =
                   stan::model::rvalue(class1, "class1",
                     stan::model::index_uni(j), stan::model::index_uni(J)); k
                 <=
                 stan::model::rvalue(class2, "class2",
                   stan::model::index_uni(j), stan::model::index_uni(J)); ++k) {
              current_statement__ = 89;
              stan::model::assign(P,
                (stan::model::rvalue(P1, "P1", stan::model::index_uni(k),
                   stan::model::index_uni(J), stan::model::index_uni(i)) +
                stan::model::rvalue(P, "P", stan::model::index_uni(j),
                  stan::model::index_uni(J), stan::model::index_uni(i))),
                "assigning variable P", stan::model::index_uni(j),
                stan::model::index_uni(J), stan::model::index_uni(i));
            }
            current_statement__ = 92;
            stan::model::assign(P,
              (stan::model::rvalue(P, "P", stan::model::index_uni(j),
                 stan::model::index_uni(J), stan::model::index_uni(i)) /
              ((stan::model::rvalue(class2, "class2",
                  stan::model::index_uni(j), stan::model::index_uni(J)) -
              stan::model::rvalue(class1, "class1",
                stan::model::index_uni(j), stan::model::index_uni(J))) + 1)),
              "assigning variable P", stan::model::index_uni(j),
              stan::model::index_uni(J), stan::model::index_uni(i));
          }
        }
      }
      current_statement__ = 101;
      for (int j = 1; j <= N; ++j) {
        current_statement__ = 99;
        stan::model::assign(Likelihood, (se - (((se + sp) - 1) *
          stan::model::rvalue(P, "P",
            stan::model::index_uni(
              stan::model::rvalue(age, "age", stan::model::index_uni(j))),
            stan::model::index_uni(
              stan::model::rvalue(age_group, "age_group",
                stan::model::index_uni(j))),
            stan::model::index_uni(
              stan::model::rvalue(categoryindex, "categoryindex",
                stan::model::index_uni(j)))))),
          "assigning variable Likelihood", stan::model::index_uni(j));
      }
      current_statement__ = 6;
      stan::math::check_greater_or_equal(function__, "L", L, 0);
      current_statement__ = 7;
      stan::math::check_greater_or_equal(function__, "lambda", lambda,
        0.00001);
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "P1", P1, 0);
      current_statement__ = 9;
      stan::math::check_less_or_equal(function__, "P1", P1, 1);
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "P", P, 0);
      current_statement__ = 10;
      stan::math::check_less_or_equal(function__, "P", P, 1);
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "Flambda", Flambda, 0);
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "Likelihood",
        Likelihood, 0);
      current_statement__ = 12;
      stan::math::check_less_or_equal(function__, "Likelihood", Likelihood, 1);
      if (emit_transformed_parameters__) {
        out__.write(x);
        out__.write(L);
        out__.write(lambda);
        out__.write(Time);
        for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
              out__.write(P1[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
            for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
              out__.write(P[(sym3__ - 1)][(sym2__ - 1)][(sym1__ - 1)]);
            }
          }
        }
        out__.write(Flambda);
        out__.write(Likelihood);
        out__.write(c);
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> T =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 1;
      stan::model::assign(T, in__.read<std::vector<local_scalar_t__>>(K),
        "assigning variable T");
      out__.write(T);
      std::vector<local_scalar_t__> annual_foi =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 2;
      stan::model::assign(annual_foi,
        in__.read<std::vector<local_scalar_t__>>(K),
        "assigning variable annual_foi");
      out__.write_free_lb(0.00001, annual_foi);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 3;
      rho = in__.read<local_scalar_t__>();
      out__.write_free_lub(0, 20, rho);
      std::vector<std::vector<local_scalar_t__>> Flambda2 =
        std::vector<std::vector<local_scalar_t__>>(maxNcategory,
          std::vector<local_scalar_t__>(Ncategoryclass, DUMMY_VAR__));
      current_statement__ = 4;
      for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
        current_statement__ = 4;
        for (int sym2__ = 1; sym2__ <= maxNcategory; ++sym2__) {
          current_statement__ = 4;
          Flambda2[(sym2__ - 1)][(sym1__ -
            1)] = in__.read<local_scalar_t__>();
        }
      }
      out__.write(Flambda2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "T", "double",
        std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "annual_foi",
        "double", std::vector<size_t>{static_cast<size_t>(K)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "rho", "double",
        std::vector<size_t>{});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "Flambda2",
        "double",
        std::vector<size_t>{static_cast<size_t>(maxNcategory),
          static_cast<size_t>(Ncategoryclass)});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      std::vector<local_scalar_t__> T =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 1;
      T = context__.vals_r("T");
      out__.write(T);
      std::vector<local_scalar_t__> annual_foi =
        std::vector<local_scalar_t__>(K, DUMMY_VAR__);
      current_statement__ = 2;
      annual_foi = context__.vals_r("annual_foi");
      out__.write_free_lb(0.00001, annual_foi);
      local_scalar_t__ rho = DUMMY_VAR__;
      current_statement__ = 3;
      rho = context__.vals_r("rho")[(1 - 1)];
      out__.write_free_lub(0, 20, rho);
      std::vector<std::vector<local_scalar_t__>> Flambda2 =
        std::vector<std::vector<local_scalar_t__>>(maxNcategory,
          std::vector<local_scalar_t__>(Ncategoryclass, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> Flambda2_flat__;
        current_statement__ = 4;
        Flambda2_flat__ = context__.vals_r("Flambda2");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
          current_statement__ = 4;
          for (int sym2__ = 1; sym2__ <= maxNcategory; ++sym2__) {
            current_statement__ = 4;
            stan::model::assign(Flambda2, Flambda2_flat__[(pos__ - 1)],
              "assigning variable Flambda2", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 4;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(Flambda2);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"T", "annual_foi", "rho", "Flambda2"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"x", "L", "lambda", "Time", "P1", "P", "Flambda", "Likelihood",
             "c"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(K)},
                std::vector<size_t>{static_cast<size_t>(K)},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(maxNcategory),
                  static_cast<size_t>(Ncategoryclass)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(A)},
             std::vector<size_t>{},
             std::vector<size_t>{static_cast<size_t>(A)},
             std::vector<size_t>{static_cast<size_t>(K)},
             std::vector<size_t>{static_cast<size_t>(A),
               static_cast<size_t>(NAgeGroups),
               static_cast<size_t>(Ncategory)},
             std::vector<size_t>{static_cast<size_t>(A),
               static_cast<size_t>(NAgeGroups),
               static_cast<size_t>(Ncategory)},
             std::vector<size_t>{static_cast<size_t>(Ncategory)},
             std::vector<size_t>{static_cast<size_t>(N)},
             std::vector<size_t>{}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "T" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "annual_foi" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= maxNcategory; ++sym2__) {
        param_names__.emplace_back(std::string() + "Flambda2" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "L");
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "Time" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
            param_names__.emplace_back(std::string() + "P1" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
            param_names__.emplace_back(std::string() + "P" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        param_names__.emplace_back(std::string() + "Flambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Likelihood" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "c");
    }
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "T" + '.' +
        std::to_string(sym1__));
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      param_names__.emplace_back(std::string() + "annual_foi" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "rho");
    for (int sym1__ = 1; sym1__ <= Ncategoryclass; ++sym1__) {
      for (int sym2__ = 1; sym2__ <= maxNcategory; ++sym2__) {
        param_names__.emplace_back(std::string() + "Flambda2" + '.' +
          std::to_string(sym2__) + '.' + std::to_string(sym1__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        param_names__.emplace_back(std::string() + "x" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "L");
      for (int sym1__ = 1; sym1__ <= A; ++sym1__) {
        param_names__.emplace_back(std::string() + "lambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        param_names__.emplace_back(std::string() + "Time" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
            param_names__.emplace_back(std::string() + "P1" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= NAgeGroups; ++sym2__) {
          for (int sym3__ = 1; sym3__ <= A; ++sym3__) {
            param_names__.emplace_back(std::string() + "P" + '.' +
              std::to_string(sym3__) + '.' + std::to_string(sym2__) + '.' +
              std::to_string(sym1__));
          }
        }
      }
      for (int sym1__ = 1; sym1__ <= Ncategory; ++sym1__) {
        param_names__.emplace_back(std::string() + "Flambda" + '.' +
          std::to_string(sym1__));
      }
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        param_names__.emplace_back(std::string() + "Likelihood" + '.' +
          std::to_string(sym1__));
      }
      param_names__.emplace_back(std::string() + "c");
    }
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"T\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"annual_foi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Flambda2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(maxNcategory) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Ncategoryclass) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Time\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"P1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(NAgeGroups) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Ncategory) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"P\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(NAgeGroups) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Ncategory) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"Flambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Ncategory) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Likelihood\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"T\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"annual_foi\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"parameters\"},{\"name\":\"rho\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"Flambda2\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(maxNcategory) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Ncategoryclass) + ",\"element_type\":{\"name\":\"real\"}}},\"block\":\"parameters\"},{\"name\":\"x\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"L\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"lambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Time\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(K) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"P1\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(NAgeGroups) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Ncategory) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"P\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(A) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(NAgeGroups) + ",\"element_type\":{\"name\":\"array\",\"length\":" + std::to_string(Ncategory) + ",\"element_type\":{\"name\":\"real\"}}}},\"block\":\"transformed_parameters\"},{\"name\":\"Flambda\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(Ncategory) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"Likelihood\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N) + ",\"element_type\":{\"name\":\"real\"}},\"block\":\"transformed_parameters\"},{\"name\":\"c\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((K + K) + 1) + (maxNcategory *
      Ncategoryclass));
    const size_t num_transformed = emit_transformed_parameters * (((((((((A +
      1) + A) + K) + ((A * NAgeGroups) * Ncategory)) + ((A * NAgeGroups) *
      Ncategory)) + Ncategory) + N) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((K + K) + 1) + (maxNcategory *
      Ncategoryclass));
    const size_t num_transformed = emit_transformed_parameters * (((((((((A +
      1) + A) + K) + ((A * NAgeGroups) * Ncategory)) + ((A * NAgeGroups) *
      Ncategory)) + Ncategory) + N) + 1));
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_intervention_namespace::model_intervention;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_intervention_namespace::profiles__;
}
#endif
#endif

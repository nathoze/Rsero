priorY1 = 0,
priorY2 = 10,
priorRho = 2,
cat_lambda = 1,
fixed_parameters = NULL,
...) {
estimated_parameters <- 0
if (!(type %in% model.list('All models'))){
print("Model is not defined.")
}
if(seroreversion){
estimated_parameters <- estimated_parameters +1
}
if(type == "constantoutbreak"){
estimated_parameters <- estimated_parameters +1
}
if(type %in% model.list(whichmodels = 'All models')){
stanname= 'intervention'
}
if(type=='outbreak'){
stanname= 'outbreak'
}
if(type=='independent'){
stanname= 'independent'
}
if(type=='independent_group'){
stanname= 'independent_group'
}
if(type=='constantoutbreak'){
stanname= 'constantoutbreak'
}
if(type %in% model.list(whichmodels = 'Outbreak models')  ){
estimated_parameters <- estimated_parameters + K*3
}
if(type  %in% model.list(whichmodels = 'I models') ){
estimated_parameters <- estimated_parameters + K*2-1
}
# check the necessary parameters are correctly in the input
if(type %in% model.list('K models') & is.null(K) ){
print("K not defined.")
}
if(type %in% model.list('K models')){
if(length(priorT1) != length(priorT2)){
print("priorT1 and priorT2 must have the same length.")
}
if(length(priorT1) == 1 ){
priorT1 = as.array(rep(priorT1,K))
}
if(length(priorT2) == 1){
priorT2 = as.array(rep(priorT2,K))
}
if(length(priorT1) != K ){
print("priorT1 must be of length 1 or K.")
}
if(length(priorT2) != K){
print("priorT2 must be of length 1 or K.")
}
}
if(type %in% model.list('Outbreak models')){
if(length(prioralpha1) != length(prioralpha2)){
print("prioralpha1 and prioralpha2 must have the same length.")
}
if(length(prioralpha1) == 1 ){
prioralpha1 = as.array(rep(prioralpha1,K))
}
if(length(prioralpha2) == 1){
prioralpha2 = as.array(rep(prioralpha2,K))
}
if(length(prioralpha1) != K ){
print("prioralpha1 must be of length 1 or K.")
}
if(length(prioralpha2) != K){
print("prioralpha2 must be of length 1 or K.")
}
if(length(priorbeta1) != length(priorbeta2)){
print("priorbeta1 and priorbeta2 must have the same length.")
}
if(length(priorbeta1) == 1 ){
priorbeta1 = as.array(rep(priorbeta1,K))
}
if(length(priorbeta2) == 1){
priorbeta2 = as.array(rep(priorbeta2,K))
}
if(length(priorbeta1) != K ){
print("priorbeta1 must be of length 1 or K.")
}
if(length(priorbeta2) != K){
print("priorbeta2 must be of length 1 or K.")
}
}
#
#   if(!is.null(fixed_parameters$rho)){
#     priorRho1 = 0.99*(-log(fixed_parameters$rho))
#     priorRho2 = 1.01*(-log(fixed_parameters$rho))
#   }
#
if(!is.null(fixed_parameters$foi)){
priorC1 = 0.99*(-log(fixed_parameters$foi))
priorC2 = 1.01*(-log(fixed_parameters$foi))
}
if(!is.null(fixed_parameters$Y)){
priorY1 = 0.99*(-log(fixed_parameters$Y))
priorY2 = 1.01*(-log(fixed_parameters$Y))
}
if(!is.null(fixed_parameters$alpha)){
prioralpha1 = 0.99*fixed_parameters$alpha
prioralpha2 = min(1,1.01*fixed_parameters$alpha)
}
if(!is.null(fixed_parameters$beta)){
priorbeta1 = 0.99*fixed_parameters$beta
priorbeta2 = min(1,1.01*fixed_parameters$beta)
}
priors <- list(prioralpha1 = prioralpha1,
prioralpha2 = prioralpha2,
priorbeta1 = priorbeta1,
priorbeta2 = priorbeta2,
priorT1 = priorT1,
priorT2 = priorT2,
priorC1 = priorC1,
priorC2 = priorC2,
priorY1 = priorY1,
priorY2 = priorY2,
priorRho = priorRho)
model <- list(type = type,
stanname = stanname,
K = K,
group_size=group_size,
seroreversion=seroreversion,
se=se,
sp=sp,
cat_lambda = cat_lambda,
estimated_parameters = estimated_parameters,
priors = priors)
class(model) <- "FOImodel"
return(model)
}
model1 = FOImodel(type = 'constant')
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
model1 = FOImodel(type = 'constant')
source("~/Dropbox/Scientific_Projects/Rsero/R/FOImodel.R")
model1 = FOImodel(type = 'constant')
source("~/Dropbox/Scientific_Projects/Rsero/R/FOImodel.R")
model1 = FOImodel(type = 'constant')
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
library(Rsero)
library(readxl)
df = read_excel("/Users/noochida/Documents/Postdoc/HTLV-1/Data/maripasoula_RP2017_couple.xlsx")
df = df[1:9, ]
df["category2"] = c(rep("15-29", 3), rep("30-59", 6))
ages_pos = rep(df$mid_age, df$TC)
sero_pos = rep(TRUE, sum(df$TC))
cat_pos = rep(df$category2, df$TC)
ages_neg = rep(df$mid_age, df$TNC)
sero_neg = rep(FALSE, sum(df$TNC))
cat_neg = rep(df$category2, df$TNC)
ages = c(ages_pos, ages_neg)
Y = c(sero_pos, sero_neg)
cats = c(cat_pos, cat_neg)
couples = SeroData(age_at_sampling =  ages, Y = Y, category = cats)
seroprevalence.plot(couples, YLIM=0.6)
constant_seroreversion_model = FOImodel(type='constant', seroreversion = 1, cat_lambda=TRUE)
FOIfit = fit( data = couples,  model = constant_seroreversion_model, chains=1)
library(Rsero)
library(readxl)
df = read_excel("/Users/noochida/Documents/Postdoc/HTLV-1/Data/maripasoula_RP2017_couple.xlsx")
df = read_excel("maripasoula_RP2017_couple.xlsx")
df = df[1:9, ]
df["category2"] = c(rep("15-29", 3), rep("30-59", 6))
ages_pos = rep(df$mid_age, df$TC)
sero_pos = rep(TRUE, sum(df$TC))
cat_pos = rep(df$category2, df$TC)
ages_neg = rep(df$mid_age, df$TNC)
sero_neg = rep(FALSE, sum(df$TNC))
cat_neg = rep(df$category2, df$TNC)
ages = c(ages_pos, ages_neg)
Y = c(sero_pos, sero_neg)
cats = c(cat_pos, cat_neg)
couples = SeroData(age_at_sampling =  ages, Y = Y, category = cats)
seroprevalence.plot(couples, YLIM=0.6)
constant_seroreversion_model = FOImodel(type='constant', seroreversion = 1, cat_lambda=TRUE)
FOIfit = fit( data = couples,  model = constant_seroreversion_model, chains=1)
seroprevalence.fit(FOIfit )
cats
devtools::install_github("nathoze/Rsero")
library(Rsero)
library(readxl)
df = read_excel("/Users/noochida/Documents/Postdoc/HTLV-1/Data/maripasoula_RP2017_couple.xlsx")
library(Rsero)
library(readxl)
#df = read_excel("/Users/noochida/Documents/Postdoc/HTLV-1/Data/maripasoula_RP2017_couple.xlsx")
df = read_excel("maripasoula_RP2017_couple.xlsx")
df = df[1:9, ]
df["category2"] = c(rep("15-29", 3), rep("30-59", 6))
ages_pos = rep(df$mid_age, df$TC)
sero_pos = rep(TRUE, sum(df$TC))
cat_pos = rep(df$category2, df$TC)
ages_neg = rep(df$mid_age, df$TNC)
sero_neg = rep(FALSE, sum(df$TNC))
cat_neg = rep(df$category2, df$TNC)
ages = c(ages_pos, ages_neg)
Y = c(sero_pos, sero_neg)
cats = c(cat_pos, cat_neg)
couples = SeroData(age_at_sampling =  ages, Y = Y, category = cats)
seroprevalence.plot(couples, YLIM=0.6)
constant_seroreversion_model = FOImodel(type='constant', seroreversion = 1, cat_lambda=TRUE)
FOIfit = fit( data = couples,  model = constant_seroreversion_model, chains=1)
seroprevalence.fit(FOIfit )
df
couples
couples_ = SeroData(age_at_sampling =  ages-14, Y = Y, category = cats)
couples_2 = SeroData(age_at_sampling =  ages-14, Y = Y, category = cats)
seroprevalence.plot(couples, YLIM=0.6)
constant_seroreversion_model = FOImodel(type='constant', seroreversion = 1)
FOIfit = fit( data = couples_2,  model = constant_seroreversion_model, chains=1)
FOIfit = fit( data = couples_2,  model = constant_seroreversion_model, chains=1)
seroprevalence.fit(FOIfit )
couples_2 = SeroData(age_at_sampling =  ages-14, Y = Y)
couples_2 = SeroData(age_at_sampling =  ages-14, Y = Y)
seroprevalence.plot(couples_2, YLIM=0.6)
constant_seroreversion_model_intervention_K2 = FOImodel(type='intervention',
K=2,
priorT1 = c(1,15),
priorT2 = c(2,16),
seroreversion = 1)
constant_seroreversion_model_intervention_K2 = FOImodel(type='intervention',
K=2,
priorT1 = c(1,15),
priorT2 = c(2,16),
seroreversion = 1)
FOIfit_K2= fit( data = couples_2,  model = constant_seroreversion_model_intervention_K2, chains=1)
FOIfit_K2= fit( data = couples_2,  model = constant_seroreversion_model_intervention_K2, chains=1)
FOIfit_K2= fit( data = couples_2,
model = constant_seroreversion_model_intervention_K2,
chains=1,
init= list(list(T =c(1,15))))
seroprevalence.fit(FOIfit_K2)
plot.FOIfit(FOIfit_K2)
constant_seroreversion_model_intervention_K_noseroreversion = FOImodel(type='intervention',
K=2,
priorT1 = c(1,15),
priorT2 = c(2,16),
seroreversion = 0)
FOIfit_K2_NoS= fit( data = couples_2,
model = constant_seroreversion_model_intervention_K_noseroreversion,
chains=1,
init= list(list(T =c(1,15))))
seroprevalence.fit(FOIfit_K2_NoS)
plot.FOIfit(FOIfit_K2_NoS)
model_3 = FOImodel(type='intervention',
K=2,
priorT1 = c(1,15),
priorT2 = c(2,16),
seroreversion = 0,
sp = 0.73)
fit_3= fit( data = couples_2,
model = model_3,
chains=1,
init= list(list(T =c(1,15))))
seroprevalence.fit(fit_3)
plot.FOIfit(fit_3)
couples_2
model_4= FOImodel(type='intervention',
K=3,
priorT1 = c(1,15,25),
priorT2 = c(2,16,35),
seroreversion = 0,
sp = 0.73)
fit_4= fit( data = couples_2,
model = model_4,
chains=1,
init= list(list(T =c(1,15))))
fit_4= fit( data = couples_2,
model = model_4,
chains=1,
init= list(list(T =c(1,15,30))))
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
library(Rsero)
install.packages("httpuv")
install.packages("httpuv")
library(Rsero)
model1 = FOImodel(type = 'constant')
model2 = FOImodel(type = 'constant',seroreversion = TRUE)
model3 = FOImodel(type = 'constantoutbreak', seroreversion = FALSE)
model3
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
model5 = FOImodel(type = 'independent', seroreversion = TRUE)
model6 = FOImodel(type = 'piecewise', K=2,seroreversion = FALSE)
model4
model5
model6
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
data1 = simulate_SeroData( foi = 0.4,
sampling_year = 2023,
epidemic_years = 2000,
number_samples = 1000)
data1 = simulate_SeroData( foi = 0.4,
sampling_year = 2023,
epidemic_years = 2000,
number_samples = 1000)
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
seroprevalence.fit(fit1)
plot_posterior(fit1)
model2 = FOImodel(type = 'constant',seroreversion = TRUE)
model3 = FOImodel(type = 'constantoutbreak', seroreversion = FALSE)
model3
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
model5 = FOImodel(type = 'independent', seroreversion = TRUE)
model6 = FOImodel(type = 'piecewise', K=2,seroreversion = FALSE)
model4
model5
model6
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
fit4 = Rsero::fit(data=data1, model = model4, chains = 1)
fit2 = Rsero::fit(data=data1, model = model2, chains = 1)
plot_posterior(fit2)
library(Rsero)
couples_2 = SeroData(age_at_sampling =  ages-14, Y = Y)
seroprevalence.plot(couples_2, YLIM=0.6)
df = read_excel("maripasoula_RP2017_couple.xlsx")
sero.age.groups <- function(dat,age_class,YLIM){
#  age_categories <- seq(from = 0, to = dat$A, by = age_class)
age_categories <- seq(from = 0, to = min(dat$A, max(dat$age)), by = age_class)
w
age_bin <- sapply(dat$age, function(x) tail(which(x-age_categories >= 0), 1L)) # find the closest element
S <- as.integer(as.logical(dat$Y))
S1 <- sapply(1:length(age_categories), function(x) length(which(age_bin==x)) )
S2 <- sapply(1:length(age_categories), function(x) sum(S[which(age_bin==x)] ))
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
df = data.frame(x=age_categories,y=S2/S1)
G=matrix(NA,nrow =  dim(df)[1], ncol=3)
for(j in seq(1,length(S1))){
if(S1[j]>3){
B= binom::binom.confint(x=S2[j],n = S1[j],methods = "exact")
G[j,1]=B$lower
G[j,2]=B$upper
G[j,3]=B$mean
}
}
G[which(G >YLIM)] =YLIM
mean_age =  c( (age_categories[1:length(age_categories)-1] +age_categories[2:length(age_categories)])/2, age_categories[length(age_categories)] )
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
if(sum(C[1, ]-C[2, ]) == 0 ){ # means that the age categories are each 1 year long
histo_label <- append(format(C[1, ]), paste(">=", tail(age_categories, n = 1), sep = ""))
} else{
histo_label <- append(apply(format(C), 2, paste, collapse = "-"), paste(">=", tail(age_categories, n = 1), sep = ""))
}
histdata <- data.frame(age = mean_age,
mean=G[,3],
lower = G[,1],
upper = G[, 2],
labels = factor(histo_label, levels=histo_label))
return(histdata)
}
data1 = simulate_SeroData( foi = 0.4,
sampling_year = 2023,
epidemic_years = 2000,
number_samples = 1000)
seroprevalence.plot(data1)
model1 = FOImodel(type = 'constant')
model2 = FOImodel(type = 'constant',seroreversion = TRUE)
model3 = FOImodel(type = 'constantoutbreak', seroreversion = FALSE)
model3
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
model5 = FOImodel(type = 'independent', seroreversion = TRUE)
model6 = FOImodel(type = 'piecewise', K=2,seroreversion = FALSE)
model4
model5
model6
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
seroprevalence.fit(fit1)
plot_posterior(fit1)
plot(data1)
seroprevalence.plot(data1)
data1
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
seroprevalence.plot(data1)
data1 = SeroData(age_at_sampling = c(1,1,1,1,1,1,11),Y = c(1,0,1,1,0,1,0) )
seroprevalence.plot(data1)
data1 = SeroData(age_at_sampling = c(1,1,1,1,1,11),Y = c(1,0,1,1,0,0) )
seroprevalence.plot(data1)
data1 = SeroData(age_at_sampling = c(1,1,1,1,11),Y = c(1,0,1,1,0) )
seroprevalence.plot(data1)
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
seroprevalence.plot(data1)
sero.age.groups <- function(dat,age_class,YLIM){
#  age_categories <- seq(from = 0, to = dat$A, by = age_class)
age_categories <- seq(from = 0, to = min(dat$A, max(dat$age)), by = age_class)
w
age_bin <- sapply(dat$age, function(x) tail(which(x-age_categories >= 0), 1L)) # find the closest element
S <- as.integer(as.logical(dat$Y))
S1 <- sapply(1:length(age_categories), function(x) length(which(age_bin==x)) )
S2 <- sapply(1:length(age_categories), function(x) sum(S[which(age_bin==x)] ))
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
df = data.frame(x=age_categories,y=S2/S1)
G=matrix(NA,nrow =  dim(df)[1], ncol=3)
for(j in seq(1,length(S1))){
if(S1[j]>1){
B= binom::binom.confint(x=S2[j],n = S1[j],methods = "exact")
G[j,1]=B$lower
G[j,2]=B$upper
G[j,3]=B$mean
}
}
G[which(G >YLIM)] =YLIM
mean_age =  c( (age_categories[1:length(age_categories)-1] +age_categories[2:length(age_categories)])/2, age_categories[length(age_categories)] )
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
if(sum(C[1, ]-C[2, ]) == 0 ){ # means that the age categories are each 1 year long
histo_label <- append(format(C[1, ]), paste(">=", tail(age_categories, n = 1), sep = ""))
} else{
histo_label <- append(apply(format(C), 2, paste, collapse = "-"), paste(">=", tail(age_categories, n = 1), sep = ""))
}
histdata <- data.frame(age = mean_age,
mean=G[,3],
lower = G[,1],
upper = G[, 2],
labels = factor(histo_label, levels=histo_label))
return(histdata)
}
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
seroprevalence.plot(data1)
source("~/Dropbox/Scientific_Projects/Rsero/R/seroprevalence_plot.R")
sero.age.groups
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
seroprevalence.plot(data1)
sero.age.groups
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
getwd
getwd()
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("rstan")
install.packages("rstan")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("rlang")
install.packages("rlang")
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/4.0")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("fastmap")
install.packages("fastmap")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("fastmap")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("bayesplot")
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("rstantools")
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("shinystan")
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("shinystan")
install.packages("binom")
install.packages("binom")
install.packages("ggplot2")
install.packages("httpuv")
install.packages("httpuv")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("shinystan")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("shinystan")
install.packages("installr")
library(installr)
updateR()
updateR()
version
version
version
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
1-1/4.9
setwd('../Rsero/')
devtools::document()
setwd('../TestsRsero/')
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
remove.packages("Rsero")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
getwd()
setwd()
devtools::document()
getwd()
setwd('../Rsero/')
devtools::document()
# create documentation
pack <- "Rsero"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
pack <- "Rsero"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))

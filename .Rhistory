seroprevalence.fit(FOIfit_K2_NoS)
plot.FOIfit(FOIfit_K2_NoS)
model_3 = FOImodel(type='intervention',
K=2,
priorT1 = c(1,15),
priorT2 = c(2,16),
seroreversion = 0,
sp = 0.73)
fit_3= fit( data = couples_2,
model = model_3,
chains=1,
init= list(list(T =c(1,15))))
seroprevalence.fit(fit_3)
plot.FOIfit(fit_3)
couples_2
model_4= FOImodel(type='intervention',
K=3,
priorT1 = c(1,15,25),
priorT2 = c(2,16,35),
seroreversion = 0,
sp = 0.73)
fit_4= fit( data = couples_2,
model = model_4,
chains=1,
init= list(list(T =c(1,15))))
fit_4= fit( data = couples_2,
model = model_4,
chains=1,
init= list(list(T =c(1,15,30))))
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
library(Rsero)
install.packages("httpuv")
install.packages("httpuv")
library(Rsero)
model1 = FOImodel(type = 'constant')
model2 = FOImodel(type = 'constant',seroreversion = TRUE)
model3 = FOImodel(type = 'constantoutbreak', seroreversion = FALSE)
model3
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
model5 = FOImodel(type = 'independent', seroreversion = TRUE)
model6 = FOImodel(type = 'piecewise', K=2,seroreversion = FALSE)
model4
model5
model6
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
data1 = simulate_SeroData( foi = 0.4,
sampling_year = 2023,
epidemic_years = 2000,
number_samples = 1000)
data1 = simulate_SeroData( foi = 0.4,
sampling_year = 2023,
epidemic_years = 2000,
number_samples = 1000)
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
seroprevalence.fit(fit1)
plot_posterior(fit1)
model2 = FOImodel(type = 'constant',seroreversion = TRUE)
model3 = FOImodel(type = 'constantoutbreak', seroreversion = FALSE)
model3
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
model5 = FOImodel(type = 'independent', seroreversion = TRUE)
model6 = FOImodel(type = 'piecewise', K=2,seroreversion = FALSE)
model4
model5
model6
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
fit4 = Rsero::fit(data=data1, model = model4, chains = 1)
fit2 = Rsero::fit(data=data1, model = model2, chains = 1)
plot_posterior(fit2)
library(Rsero)
couples_2 = SeroData(age_at_sampling =  ages-14, Y = Y)
seroprevalence.plot(couples_2, YLIM=0.6)
df = read_excel("maripasoula_RP2017_couple.xlsx")
sero.age.groups <- function(dat,age_class,YLIM){
#  age_categories <- seq(from = 0, to = dat$A, by = age_class)
age_categories <- seq(from = 0, to = min(dat$A, max(dat$age)), by = age_class)
w
age_bin <- sapply(dat$age, function(x) tail(which(x-age_categories >= 0), 1L)) # find the closest element
S <- as.integer(as.logical(dat$Y))
S1 <- sapply(1:length(age_categories), function(x) length(which(age_bin==x)) )
S2 <- sapply(1:length(age_categories), function(x) sum(S[which(age_bin==x)] ))
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
df = data.frame(x=age_categories,y=S2/S1)
G=matrix(NA,nrow =  dim(df)[1], ncol=3)
for(j in seq(1,length(S1))){
if(S1[j]>3){
B= binom::binom.confint(x=S2[j],n = S1[j],methods = "exact")
G[j,1]=B$lower
G[j,2]=B$upper
G[j,3]=B$mean
}
}
G[which(G >YLIM)] =YLIM
mean_age =  c( (age_categories[1:length(age_categories)-1] +age_categories[2:length(age_categories)])/2, age_categories[length(age_categories)] )
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
if(sum(C[1, ]-C[2, ]) == 0 ){ # means that the age categories are each 1 year long
histo_label <- append(format(C[1, ]), paste(">=", tail(age_categories, n = 1), sep = ""))
} else{
histo_label <- append(apply(format(C), 2, paste, collapse = "-"), paste(">=", tail(age_categories, n = 1), sep = ""))
}
histdata <- data.frame(age = mean_age,
mean=G[,3],
lower = G[,1],
upper = G[, 2],
labels = factor(histo_label, levels=histo_label))
return(histdata)
}
data1 = simulate_SeroData( foi = 0.4,
sampling_year = 2023,
epidemic_years = 2000,
number_samples = 1000)
seroprevalence.plot(data1)
model1 = FOImodel(type = 'constant')
model2 = FOImodel(type = 'constant',seroreversion = TRUE)
model3 = FOImodel(type = 'constantoutbreak', seroreversion = FALSE)
model3
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
model5 = FOImodel(type = 'independent', seroreversion = TRUE)
model6 = FOImodel(type = 'piecewise', K=2,seroreversion = FALSE)
model4
model5
model6
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
seroprevalence.fit(fit1)
plot_posterior(fit1)
plot(data1)
seroprevalence.plot(data1)
data1
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
seroprevalence.plot(data1)
data1 = SeroData(age_at_sampling = c(1,1,1,1,1,1,11),Y = c(1,0,1,1,0,1,0) )
seroprevalence.plot(data1)
data1 = SeroData(age_at_sampling = c(1,1,1,1,1,11),Y = c(1,0,1,1,0,0) )
seroprevalence.plot(data1)
data1 = SeroData(age_at_sampling = c(1,1,1,1,11),Y = c(1,0,1,1,0) )
seroprevalence.plot(data1)
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
seroprevalence.plot(data1)
sero.age.groups <- function(dat,age_class,YLIM){
#  age_categories <- seq(from = 0, to = dat$A, by = age_class)
age_categories <- seq(from = 0, to = min(dat$A, max(dat$age)), by = age_class)
w
age_bin <- sapply(dat$age, function(x) tail(which(x-age_categories >= 0), 1L)) # find the closest element
S <- as.integer(as.logical(dat$Y))
S1 <- sapply(1:length(age_categories), function(x) length(which(age_bin==x)) )
S2 <- sapply(1:length(age_categories), function(x) sum(S[which(age_bin==x)] ))
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
df = data.frame(x=age_categories,y=S2/S1)
G=matrix(NA,nrow =  dim(df)[1], ncol=3)
for(j in seq(1,length(S1))){
if(S1[j]>1){
B= binom::binom.confint(x=S2[j],n = S1[j],methods = "exact")
G[j,1]=B$lower
G[j,2]=B$upper
G[j,3]=B$mean
}
}
G[which(G >YLIM)] =YLIM
mean_age =  c( (age_categories[1:length(age_categories)-1] +age_categories[2:length(age_categories)])/2, age_categories[length(age_categories)] )
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
if(sum(C[1, ]-C[2, ]) == 0 ){ # means that the age categories are each 1 year long
histo_label <- append(format(C[1, ]), paste(">=", tail(age_categories, n = 1), sep = ""))
} else{
histo_label <- append(apply(format(C), 2, paste, collapse = "-"), paste(">=", tail(age_categories, n = 1), sep = ""))
}
histdata <- data.frame(age = mean_age,
mean=G[,3],
lower = G[,1],
upper = G[, 2],
labels = factor(histo_label, levels=histo_label))
return(histdata)
}
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
seroprevalence.plot(data1)
source("~/Dropbox/Scientific_Projects/Rsero/R/seroprevalence_plot.R")
sero.age.groups
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
seroprevalence.plot(data1)
sero.age.groups
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("magrittr")
install.packages("magrittr")
install.packages("magrittr")
getwd
getwd()
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("rstan")
install.packages("rstan")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("rlang")
install.packages("rlang")
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("rlang")
install.packages("rlang")
remove.packages("rlang", lib="~/R/win-library/4.0")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("fastmap")
install.packages("fastmap")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("fastmap")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("bayesplot")
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("rstantools")
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("shinystan")
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("shinystan")
install.packages("binom")
install.packages("binom")
install.packages("ggplot2")
install.packages("httpuv")
install.packages("httpuv")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("shinystan")
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
install.packages("shinystan")
install.packages("installr")
library(installr)
updateR()
updateR()
version
version
version
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
data_tmp = SeroData(age_at_sampling =  ages ,
Y =  runif(n=ns) < 1-exp(-foi*factor*ages),
sampling_year = 2023,
category = cbind(sex, location, hcw))
ns  = 600
sex.list  = c('males', 'females')
location.list = c('Region 1', 'Region 2', "Region 3")
HCW.list = c(0,1)
sex <- sample(sex.list,ns, replace= TRUE)
location <- sample(location.list,ns, replace= TRUE)
hcw <- sample(HCW.list, ns, replace = TRUE)
factor = 1*(sex=='males') + 0.5*(sex=='females')
factor =factor*( 1*(location=="Region 1") + 0.5*(location=="Region 2") + 3*(location=="Region 3"))
factor =factor*( 1*(hcw==0) + 1.1*(hcw==1) )
ages = round(runif(n=length(sex))*70)+1
data_tmp = SeroData(age_at_sampling =  ages ,
Y =  runif(n=ns) < 1-exp(-foi*factor*ages),
sampling_year = 2023,
category = cbind(sex, location, hcw))
fit = fit(data = data_tmp,
model = model,
chains=1, cores=1, iter=5000)
model1 = FOImodel(type = 'constant')
model2 = FOImodel(type = 'constant',seroreversion = TRUE)
model3 = FOImodel(type = 'constantoutbreak', seroreversion = FALSE)
model3
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
model5 = FOImodel(type = 'independent', seroreversion = TRUE)
model6 = FOImodel(type = 'piecewise', K=2,seroreversion = FALSE)
model4
model5
fit = fit(data = data_tmp,
model = model1,
chains=1, cores=1, iter=5000)
data_tmp = SeroData(age_at_sampling =  ages ,
Y =  runif(n=ns) < 1-exp(-foi*factor*ages),
sampling_year = 2023,
category = cbind(sex, location, hcw))
fit = fit(data = data_tmp,
model = model1,
chains=1, cores=1, iter=5000)
ns  = 600
sex.list  = c('males', 'females')
location.list = c('Region 1', 'Region 2', "Region 3")
HCW.list = c(0,1)
sex <- sample(sex.list,ns, replace= TRUE)
location <- sample(location.list,ns, replace= TRUE)
hcw <- sample(HCW.list, ns, replace = TRUE)
factor = 1*(sex=='males') + 0.5*(sex=='females')
factor =factor*( 1*(location=="Region 1") + 0.5*(location=="Region 2") + 3*(location=="Region 3"))
factor =factor*( 1*(hcw==0) + 1.1*(hcw==1) )
ages = round(runif(n=length(sex))*70)+1
data_tmp = SeroData(age_at_sampling =  ages ,
Y =  runif(n=ns) < 1-exp(-foi*factor*ages),
sampling_year = 2023,
category = cbind(sex, location, hcw))
fit = fit(data = data_tmp,
model = model1,
chains=1, cores=1, iter=5000)
rstan::traceplot(fit$fit, pars = "rho")
# data avec categories
foi =0.01
ns  = 600
sex.list  = c('males', 'females')
location.list = c('Region 1', 'Region 2', "Region 3")
HCW.list = c(0,1)
sex <- sample(sex.list,ns, replace= TRUE)
location <- sample(location.list,ns, replace= TRUE)
hcw <- sample(HCW.list, ns, replace = TRUE)
factor = 1*(sex=='males') + 0.5*(sex=='females')
factor =factor*( 1*(location=="Region 1") + 0.5*(location=="Region 2") + 3*(location=="Region 3"))
factor =factor*( 1*(hcw==0) + 1.1*(hcw==1) )
ages = round(runif(n=length(sex))*70)+1
data_tmp = SeroData(age_at_sampling =  ages ,
Y =  runif(n=ns) < 1-exp(-foi*factor*ages),
sampling_year = 2023,
category = cbind(sex, location, hcw))
fit = fit(data = data_tmp,
model = model1,
chains=1, cores=1, iter=5000)
rstan::traceplot(fit$fit, pars = "rho")
data1 = simulate_SeroData( foi = 0.4,
sampling_year = 2023,
epidemic_years = 2000,
number_samples = 1000)
data1 = SeroData(age_at_sampling = c(1,1,1,11),Y = c(1,0,1,0) )
seroprevalence.plot(data1)
model1 = FOImodel(type = 'constant')
model2 = FOImodel(type = 'constant',seroreversion = TRUE)
model3 = FOImodel(type = 'constantoutbreak', seroreversion = FALSE)
model3
model4 = FOImodel(type = 'outbreak',K=1,seroreversion = FALSE)
model5 = FOImodel(type = 'independent', seroreversion = TRUE)
model6 = FOImodel(type = 'piecewise', K=2,seroreversion = FALSE)
model4
model5
model6
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
traceplot(fit1)
fit1 = Rsero::fit(data=data1, model = model1, chains = 1)
source("~/Dropbox/Scientific_Projects/TestsRsero/traceplot.R")
traceplot(fit1)
fit1 = Rsero::fit(data=data1, model = model1, chains = 4)
traceplot(fit1)
setwd('../Rsero/')
devtools::document()
data <- simulate_SeroData(number_samples = 1000,
age_class = 1,
epidemic_years = c(1976,1992),
foi = c(0.2,0.3))
model <- FOImodel('outbreak', K = 2)
F1 <- fit(model = model, data = data)
traceplot(F1)
data
model <- FOImodel('outbreak', K = 2, init = list(list(c(30,50))))
F1 <- fit(model = model, data = data)
model <- FOImodel('outbreak', K = 2, init = list(list(c(30,60))))
F1 <- fit(model = model, data = data)
model <- FOImodel('outbreak', K = 2, init = list(list(c(30,60))))
F1 <- fit(model = model, data = data)
data <- simulate_SeroData(number_samples = 500,
age_class = 1,
epidemic_years = c(1976,1992),
foi = c(0.2,0.3))
model <- FOImodel('outbreak', K = 2, init = list(list(c(30,60))))
F1 <- fit(model = model, data = data)
traceplot(F1)
F1 <- fit(model = model, data = data)
traceplot(F1)
F1$fit
Chains=rstan::extract(F1$fit)
Chains$T
FOIfit
FOIfit=F1
name <- FOIfit$model$type
if(name %in% model.list('All models')){
if(name %in% model.list('Constant models')){# constant or constantoutbreak
pars = c(pars, "annual_foi")
}
if(name %in% model.list('I models')){
pars = c(pars, "Time")
pars = c(pars, "annual_foi")
}
if(name %in% model.list('Outbreak models')){
pars = c(pars, "T")
}
if(FOIfit$model$seroreversion){
pars =c(pars, "rho")
}
d= FOIfit$data$category.position.in.table
if(FOIfit$model$cat_lambda & dim(d)[1]>0){
pars =c(pars, "Flambda")
}
}
pars=NULL
if(name %in% model.list('All models')){
if(name %in% model.list('Constant models')){# constant or constantoutbreak
pars = c(pars, "annual_foi")
}
if(name %in% model.list('I models')){
pars = c(pars, "Time")
pars = c(pars, "annual_foi")
}
if(name %in% model.list('Outbreak models')){
pars = c(pars, "T")
}
if(FOIfit$model$seroreversion){
pars =c(pars, "rho")
}
d= FOIfit$data$category.position.in.table
if(FOIfit$model$cat_lambda & dim(d)[1]>0){
pars =c(pars, "Flambda")
}
}
pars
rstan::traceplot(object = fit$fit,
pars = pars)
rstan::traceplot(object = fit$fit)
rstan::traceplot(object = fit$fit, pars = 'Time')
rstan::traceplot(object = fit$fit, pars = 'alpha')
model
source("~/Dropbox/Scientific_Projects/Rsero/R/traceplot.R")
traceplot(F1)
traceplot(FOIfit = F1)
FOIfit = F1
name <- FOIfit$model$type
name
if(name %in% model.list('All models')){
if(name %in% model.list('Constant models')){# constant or constantoutbreak
pars = c(pars, "annual_foi")
}
if(name %in% model.list('I models')){
pars = c(pars, "Time")
pars = c(pars, "annual_foi")
}
if(name %in% model.list('Outbreak models')){
pars = c(pars, "T")
}
if(FOIfit$model$seroreversion){
pars =c(pars, "rho")
}
d= FOIfit$data$category.position.in.table
if(FOIfit$model$cat_lambda & dim(d)[1]>0){
pars =c(pars, "Flambda")
}
}
pars
pars = "T"
fit = F1
rstan::traceplot(object = fit$fit,
pars = pars,
include = include, unconstrain = unconstrain,
inc_warmup = inc_warmup, window = window, nrow = nrow, ncol = ncol)
rstan::traceplot(object = fit$fit)
pars = "T[1]"
traceplot(FOIfit = F1)
rstan::traceplot(F1$fit)
rstan::traceplot(F1$fit,pars = "T")
source("~/Dropbox/Scientific_Projects/Rsero/R/traceplot.R")
devtools::document()
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
traceplot(FOIfit = F1)
traceplot
help(traceplot)
model <- FOImodel('piecewise', K = 2, init = list(list(c(30,60))))
F1 <- fit(model = model, data = data)
model <- FOImodel('outbreak', K = 2, init = list(T = list(c(30,60))))
F1 <- fit(model = model, data = data, chain=1)
model <- FOImodel('piecewise', K = 2, init = list(T = list(c(30,60))))
F1 <- fit(model = model, data = data, chain=1)
model <- FOImodel('piecewise', K = 1, init = list(T = list(c(30)))
F1 <- fit(model = model, data = data, chain=1)
model <- FOImodel('piecewise', K = 1, init = list(T = list(c(30))))
model <- FOImodel('piecewise', K = 1, init = list(T = list(c(30))))
F1 <- fit(model = model, data = data, chain=1)
traceplot(FOIfit = F1)
Chains=rstan::extract(F1$fit)
Chains$annual_foi
pars=NULL
FOIfit = F1
name <- FOIfit$model$type
name
if(name %in% model.list('All models')){
if(name %in% model.list('Constant models')){# constant or constantoutbreak
pars = c(pars, "annual_foi")
}
if(name %in% model.list('I models')){
pars = c(pars, "Time")
pars = c(pars, "annual_foi")
}
if(name %in% model.list('Outbreak models')){
pars = c(pars, "T")
}
if(FOIfit$model$seroreversion){
pars =c(pars, "rho")
}
d= FOIfit$data$category.position.in.table
if(FOIfit$model$cat_lambda & dim(d)[1]>0){
pars =c(pars, "Flambda")
}
}
pars
source("~/Dropbox/Scientific_Projects/Rsero/R/traceplot.R")
traceplot(FOIfit = F1)
model <- FOImodel('outbreak', K = 1, init = list(T = list(c(30))))
F1 <- fit(model = model, data = data, chain=1)
traceplot(FOIfit = F1)
source("~/Dropbox/Scientific_Projects/Rsero/R/traceplot.R")
traceplot(FOIfit = F1)
devtools::document()
devtools::document()

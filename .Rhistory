fit = fit(data = data_constant_2,
model =model,
chains=1,
cores=1,
iter=5000)
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
library(tidyr)
library(dplyr)
library(gridExtra)
library(posterior)
#source("~/new_directory_Rsero/R/compute_information_criteria.R")
#source("~/new_directory_Rsero/R/plot_seropositive.R")
sero.age.groups <- function(dat,age_class,YLIM){
#  age_categories <- seq(from = 0, to = dat$A, by = age_class)
age_categories <- seq(from = 0, to = min(dat$A, max(dat$age)), by = age_class)
age_bin <- sapply(dat$age, function(x) tail(which(x-age_categories >= 0), 1L)) # find the closest element
S <- as.integer(as.logical(dat$Y))
S1 <- sapply(1:length(age_categories), function(x) length(which(age_bin==x)) )
S2 <- sapply(1:length(age_categories), function(x) sum(S[which(age_bin==x)] ))
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
df = data.frame(x=age_categories,y=S2/S1)
G=matrix(NA,nrow =  dim(df)[1], ncol=3)
for(j in seq(1,length(S1))){
if(S1[j]>3){
B= binom::binom.confint(x=S2[j],n = S1[j],methods = "exact")
G[j,1]=B$lower
G[j,2]=B$upper
G[j,3]=B$mean
}
}
G[which(G >YLIM)] =YLIM
mean_age =  c( (age_categories[1:length(age_categories)-1] +age_categories[2:length(age_categories)])/2, age_categories[length(age_categories)] )
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
if(sum(C[1, ]-C[2, ]) == 0 ){ # means that the age categories are each 1 year long
histo_label <- append(format(C[1, ]), paste(">=", tail(age_categories, n = 1), sep = ""))
} else{
histo_label <- append(apply(format(C), 2, paste, collapse = "-"), paste(">=", tail(age_categories, n = 1), sep = ""))
}
histdata <- data.frame(age = mean_age,
mean=G[,3],
lower = G[,1],
upper = G[, 2],
labels = factor(histo_label, levels=histo_label))
return(histdata)
}
model  = FOImodel(type='constant')
model_age  = FOImodel(type='constant',  age_dependent_foi = 1)
model_seroreversion  = FOImodel(type='constant', seroreversion=1)
model_age_seroreversion  = FOImodel(type='constant',  age_dependent_foi = 1,seroreversion=1)
data_constant_1 =  simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000,  rho = 0.05)
data_constant_2 = simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000, age_risk = 0.1,rho = 0.05)
seroprevalence.plot(data_constant_1)
seroprevalence.plot(data_constant_2)
fit = fit(data = data_constant_2,
model =model,
chains=1,
cores=1,
iter=5000)
fit_age = fit(data = data_constant_2,
model =model_age,
chains=1,
cores=1,
iter=5000)
fit_seroreversion = fit(data = data_constant_2,
model =model_seroreversion,
chains=1,
cores=1,
iter=5000)
fit_age_seroreversion = fit(data = data_constant_2,
model =model_age_seroreversion,
chains=1,
cores=1,
iter=5000)
compute_information_criteria(fit)
compute_information_criteria(fit_age)
compute_information_criteria(fit_seroreversion)
compute_information_criteria(fit_age_seroreversion)
seroprevalence.fit(fit)
seroprevalence.fit(fit_age)
seroprevalence.fit(fit_seroreversion)
seroprevalence.fit(fit_age_seroreversion)
$$
plot_posterior(fit_age_seroreversion)
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
library(tidyr)
library(dplyr)
library(gridExtra)
library(posterior)
model  = FOImodel(type='constant')
model_age  = FOImodel(type='constant',  age_dependent_foi = 1)
model_seroreversion  = FOImodel(type='constant', seroreversion=1)
model_age_seroreversion  = FOImodel(type='constant',  age_dependent_foi = 1,seroreversion=1)
data_constant_1 =  simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000,  rho = 0.05)
data_constant_2 = simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000, age_risk = 0.1,rho = 0.05)
seroprevalence.plot(data_constant_1)
seroprevalence.plot(data_constant_2)
data_constant_1 =  simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000,  rho = 0.05)
data_constant_2 = simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000, age_risk = 0.1,rho = 0.05)
seroprevalence.plot(data_constant_1)
seroprevalence.plot(data_constant_2)
seroprevalence.plot(data_constant_1)
seroprevalence.plot(data_constant_2)
data_constant_2 = simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000, age_risk = -0.1,rho = 0.05)
seroprevalence.plot(data_constant_1)
seroprevalence.plot(data_constant_2)
fit_age_seroreversion = fit(data = data_constant_2,
model =model_age_seroreversion,
chains=1,
cores=1,
iter=5000)
seroprevalence.fit(fit_age_seroreversion)
library(Rsero)
library(tidyr)
library(dplyr)
library(gridExtra)
library(posterior)
#source("~/new_directory_Rsero/R/compute_information_criteria.R")
#source("~/new_directory_Rsero/R/plot_seropositive.R")
model  = FOImodel(type='constant')
model_age  = FOImodel(type='constant',  age_dependent_foi = 1)
model_seroreversion  = FOImodel(type='constant', seroreversion=1)
model_age_seroreversion  = FOImodel(type='constant',  age_dependent_foi = 1,seroreversion=1)
data_constant_1 =  simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000,  rho = 0.05)
data_constant_2 = simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000, age_risk = -0.1,rho = 0.05)
seroprevalence.plot(data_constant_1)
seroprevalence.plot(data_constant_2)
fit = fit(data = data_constant_2,
model =model,
chains=1,
cores=1,
iter=5000)
fit_age = fit(data = data_constant_2,
model =model_age,
chains=1,
cores=1,
iter=5000)
compute_information_criteria(fit)
seroprevalence.fit(fit)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
data_emergence =  simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2000),
number_samples = 1000,  rho = 0.05)
model_1  = FOImodel(type='constant')
model_2 = FOImodel(type='emergence')
data_emergence =  simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2000),
number_samples = 1000,  rho = 0.05)
library(Rsero)
model_1  = FOImodel(type='constant')
model_2 = FOImodel(type='emergence')
data_emergence =  simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2000),
number_samples = 1000,  rho = 0.05)
seq(1954, 2000)
length(seq(1954, 2000)
length(seq(1954, 2000))
library(Rsero)
model_1  = FOImodel(type='constant')
model_2 = FOImodel(type='emergence')
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.1, 33)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2000),
number_samples = 1000)
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.1, 33)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
model_2 = FOImodel(type='emergence')
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.1, 23)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
plot(data_emergence)
seroprevalence.plot(data_emergence)
library(dplyr)
model_1  = FOImodel(type='constant')
model_2 = FOImodel(type='emergence')
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.1, 23)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
seroprevalence.plot(data_emergence)
fit = fit(model = model_2,data = dazta_emergence, chains=1)
fit = fit(model = model_2,data = data_emergence, chains=1)
model_2$K
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
library(dplyr)
model_1  = FOImodel(type='constant')
model_2 = FOImodel(type='emergence')
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.1, 23)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
seroprevalence.plot(data_emergence)
fit = fit(model = model_2,data = data_emergence, chains=1)
model_2
model_2$priors$priorT1
model_2$priors$priorT1 = as.array(model_2$priors$priorT1 =)
model_2$priors$priorT1 = as.array(model_2$priors$priorT1 )
fit = fit(model = model_2,data = data_emergence, chains=1)
model_2$priors$priorT2 = as.array(model_2$priors$priorT2)
fit = fit(model = model_2,data = data_emergence, chains=1)
plot(fit)
seroprevalence.fit(fit)
Rsero::parameters_credible_intervals(fit)
data_emergence
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.05, 23)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
seroprevalence.plot(data_emergence)
model_2$priors$priorT1 = as.array(model_2$priors$priorT1 )
model_2$priors$priorT2 = as.array(model_2$priors$priorT2)
fit = fit(model = model_2,data = data_emergence, chains=1)
seroprevalence.fit(fit)
Rsero::parameters_credible_intervals(fit)
compute_information_criteria(fit)
fit = fit(model = model_1,data = data_emergence, chains=1)
compute_information_criteria(fit)
Chains=rstan::extract(fit$fit)
Chains$lambda
dim(Chains$lambda)
L=Chains$lambda[3,]
plot(L)
model_3 = FOImodel(type='piecewise', K=1)
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.05, 23)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
seroprevalence.plot(data_emergence)
model_2$priors$priorT1 = as.array(model_2$priors$priorT1 )
fit = fit(model = model_3,data = data_emergence, chains=1)
seroprevalence.fit(fit)
Rsero::parameters_credible_intervals(fit)
compute_information_criteria(fit)
model_3 = FOImodel(type='piecewise', K=2)
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.05, 23)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
seroprevalence.plot(data_emergence)
model_2$priors$priorT1 = as.array(model_2$priors$priorT1 )
model_2$priors$priorT2
model_3$priors$priorT2
fit = fit(model = model_3,data = data_emergence, chains=1)
seroprevalence.fit(fit)
Rsero::parameters_credible_intervals(fit)
compute_information_criteria(fit)
Chains=rstan::extract(fit$fit)
L=Chains$lambda[3,]
plot(L)
fit2 = fit(model = model_2,data = data_emergence, chains=1)
fit = fit2
seroprevalence.fit(fit)
Rsero::parameters_credible_intervals(fit)
compute_information_criteria(fit)
Chains =rt
Chains =Rsero::extract(fit$fit)
Chains =rstan::extract(fit$fit)
plot(Chains$T_raw)
plot(Chains$Time)
plot(Chains$lambda)
plot(Chains$lambda[1,])
plot(Chains$annual_foi_raw)
plot(Chains$annual_foi)
model_2$prior_distribution_constant_foi
model_2$prior_distribution_T
model_3$prior_distribution_T
model_1$prior_distribution_T
data_emergence
plot(Chains$T_raw)
plot(Chains$T)
plot(Chains$Time)
plot(Chains$lambda)
plot(Chains$lambda)[20,]
plot(Chains$lambda[20,])
plot(Chains$lambda[300,])
model_2
model_2$stanname
model_2$type
model_2$stanname
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
library(dplyr)
model_1  = FOImodel(type='constant')
model_2 = FOImodel(type='emergence')
model_3 = FOImodel(type='piecewise', K=2)
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.05, 23)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
seroprevalence.plot(data_emergence)
model_2$priors$priorT1 = as.array(model_2$priors$priorT1 )
model_2$priors$priorT2 = as.array(model_2$priors$priorT2)
fit3 = fit(model = model_3,data = data_emergence, chains=1)
fit2 = fit(model = model_2,data = data_emergence, chains=1)
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
library(dplyr)
model_1  = FOImodel(type='constant')
model_2 = FOImodel(type='emergence')
model_3 = FOImodel(type='piecewise', K=2)
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.05, 23)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
seroprevalence.plot(data_emergence)
fit2 = fit(model = model_2,data = data_emergence, chains=1)
fit = fit2
seroprevalence.fit(fit)
model_2$priors$priorT1 = as.array(model_2$priors$priorT1 )
model_2$priors$priorT2 = as.array(model_2$priors$priorT2)
fit2 = fit(model = model_2,data = data_emergence, chains=1)
fit = fit2
seroprevalence.fit(fit)
Rsero::parameters_credible_intervals(fit)
compute_information_criteria(fit)
Chains =rstan::extract(fit$fit)
plot(Chains$T_raw)
fit1 = fit(model = model_1,data = data_emergence, chains=1)
fit = fit1
seroprevalence.fit(fit)
Rsero::parameters_credible_intervals(fit)
compute_information_criteria(fit)
fit3 = fit(model = model_3,data = data_emergence, chains=1)
fit = fit3
seroprevalence.fit(fit)
Rsero::parameters_credible_intervals(fit)
compute_information_criteria(fit)
Chains =rstan::extract(fit$fit)
plot(Chains$T_raw)
devtools::install_local(path='../Rsero', force = TRUE)
devtools::install_local(path='../Rsero', force = TRUE)
library(Rsero)
library(dplyr)
model_1 = FOImodel(type='constant')
model_2 = FOImodel(type='emergence')
model_3 = FOImodel(type='piecewise', K=2)
data_emergence =  simulate_SeroData( foi =c(rep(0, 47),rep(0.05, 23)) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000)
seroprevalence.plot(data_emergence)
#
# model_2$priors$priorT1 = as.array(model_2$priors$priorT1 )
# model_2$priors$priorT2 = as.array(model_2$priors$priorT2)
#
# fit1 = fit(model = model_1,data = data_emergence, chains=1)
fit2 = fit(model = model_2,data = data_emergence, chains=1)
# fit3 = fit(model = model_3,data = data_emergence, chains=1)
fit = fit2
seroprevalence.fit(fit)
Rsero::parameters_credible_intervals(fit)
compute_information_criteria(fit)
Chains =rstan::extract(fit$fit)
plot(Chains$T_raw)
setwd('../Rsero/')
# Ensure roxygen and pkg tools are up to date
install.packages(c("rlang","pkgload","roxygen2","Rcpp"))
# Clean out any stale generated files
unlink("NAMESPACE")
unlink("man", recursive = TRUE)
devtools::clean_dll()
# Re-document without attaching
roxygen2::roxygenise(package.dir = ".", load_code = "source")
# Sanity check NAMESPACE (no stray exportPattern etc.)
cat(readLines("NAMESPACE"), sep = "\n")
# Try loading
devtools::load_all(export_all = FALSE)
unlink("man", recursive = TRUE)
unlink("NAMESPACE")
roxygen2::roxygenise(package.dir = ".", load_code = "source")
devtools::build()
devtools::document()#
# create documentation
pack <- "Rsero"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(Rsero)
library(tidyr)
library(dplyr)
library(gridExtra)
library(posterior)
#source("~/new_directory_Rsero/R/compute_information_criteria.R")
#source("~/new_directory_Rsero/R/plot_seropositive.R")
sero.age.groups <- function(dat,age_class,YLIM){
#  age_categories <- seq(from = 0, to = dat$A, by = age_class)
age_categories <- seq(from = 0, to = min(dat$A, max(dat$age)), by = age_class)
age_bin <- sapply(dat$age, function(x) tail(which(x-age_categories >= 0), 1L)) # find the closest element
S <- as.integer(as.logical(dat$Y))
S1 <- sapply(1:length(age_categories), function(x) length(which(age_bin==x)) )
S2 <- sapply(1:length(age_categories), function(x) sum(S[which(age_bin==x)] ))
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
df = data.frame(x=age_categories,y=S2/S1)
G=matrix(NA,nrow =  dim(df)[1], ncol=3)
for(j in seq(1,length(S1))){
if(S1[j]>3){
B= binom::binom.confint(x=S2[j],n = S1[j],methods = "exact")
G[j,1]=B$lower
G[j,2]=B$upper
G[j,3]=B$mean
}
}
G[which(G >YLIM)] =YLIM
mean_age =  c( (age_categories[1:length(age_categories)-1] +age_categories[2:length(age_categories)])/2, age_categories[length(age_categories)] )
C <- (rbind((age_categories[1:length(age_categories)-1]), (age_categories[2:length(age_categories)]-1)))
if(sum(C[1, ]-C[2, ]) == 0 ){ # means that the age categories are each 1 year long
histo_label <- append(format(C[1, ]), paste(">=", tail(age_categories, n = 1), sep = ""))
} else{
histo_label <- append(apply(format(C), 2, paste, collapse = "-"), paste(">=", tail(age_categories, n = 1), sep = ""))
}
histdata <- data.frame(age = mean_age,
mean=G[,3],
lower = G[,1],
upper = G[, 2],
labels = factor(histo_label, levels=histo_label))
return(histdata)
}
model  = FOImodel(type='constant')
model_age  = FOImodel(type='constant',  age_dependent_foi = 1)
model_seroreversion  = FOImodel(type='constant', seroreversion=1)
model_age_seroreversion  = FOImodel(type='constant',  age_dependent_foi = 1,seroreversion=1)
data_constant_1 =  simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000,  rho = 0.05)
data_constant_2 = simulate_SeroData( foi =rep(0.1, 70) ,
sampling_year = 2023,
epidemic_years = seq(1954, 2023),
number_samples = 1000, age_risk = 0.1,rho = 0.05)
seroprevalence.plot(data_constant_1)
seroprevalence.plot(data_constant_2)
fit = fit(data = data_constant_2,
model =model,
chains=1,
cores=1,
iter=5000)
fit_age = fit(data = data_constant_2,
model =model_age,
chains=1,
cores=1,
iter=5000)
model_emergence  = FOImodel(type='emergence')
fit = fit(data = data_constant_2,
model =model_emergence,
chains=1,
cores=1,
iter=5000)
model_emergence
data_constant_2
seroprevalence.plot(data_constant_2)
seroprevalence.plot(data_constant_1)
data_constant_3 =  simulate_SeroData( foi =rep(0.01, 70) ,
sampling_year = 2023,
epidemic_years = seq(1980, 2023),
number_samples = 500)
seroprevalence.plot(data_constant_3)
model_emergence  = FOImodel(type='emergence')
model_emergence  = FOImodel(type='emergence',K = 1)
fit = fit(data = data_constant_3,
model =model_emergence,
chains=1,
cores=1,
iter=5000)
fit
data_constant_3
model_emergence  = FOImodel(type='emergence',K = 1)
model_emergence
dev.off
dev.off()
model_emergence  = FOImodel(type='emergence',K = 1)
fit = fit(data = data_constant_3,
model =model_emergence,
chains=1,
cores=1,
iter=5000)
